[{"path":"https://msberends.github.io/plot2/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://msberends.github.io/plot2/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://msberends.github.io/plot2/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://msberends.github.io/plot2/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://msberends.github.io/plot2/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"’ve using ggplot2 , ’re likely familiar strengths versatility creating wide array visualisations. However, powerful ggplot2 , often requires define every single detail . Whether ’s specifying aesthetics, selecting geoms, adjusting scales, ’re control every element. ’s one reasons love ggplot2; offers immense flexibility precision. streamline process many common tasks? Enter plot2(), friendly companion ggplot2 designed reduce repetitive aspects plotting without sacrificing customizability ggplot2 known . Think plot2() plotting assistant, lot heavy lifting automatically can focus fun parts — like exploring data finding insights. vignette, ’ll take deep dive plot2() function companion add_*() functions. ’ll walk everything basics advanced features, helping unlock full potential powerful tool. Whether ’re plotting simple bar charts complex Sankey diagrams, plot2() got covered.","code":""},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"the-plot2-philosophy-less-typing-more-plotting","dir":"Articles","previous_headings":"Introduction","what":"The Plot2 Philosophy: Less Typing, More Plotting","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"dive code, let’s talk briefly philosophy behind plot2(). core, plot2() designed make plotting R intuitive less cumbersome. ’ve ever frustrated write ggplot() aes() , plot2() answer. concept simple, exact opposite ggplot2: give plot2() data, figure rest, enabling many popular plotting options without ever needing leave single function. goal get data visualisation little friction possible. since plot2() just returns ggplot object, can extend way outcome ggplot(). philosophy shines particularly plot2() simplifies functionalities like faceting, theming, applying inline transformations. Rather managing multiple functions layers, plot2() allows achieve results directly.","code":""},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"getting-started-with-plot2","dir":"Articles","previous_headings":"","what":"Getting Started with plot2()","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Let’s start basics. plot2() function wrapper around ggplot2 simplifies many tasks usually handle manually. begin , don’t even need specify kind plot want — plot2() make educated guess based data.","code":""},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"basic-usage-let-plot2-do-the-work","dir":"Articles","previous_headings":"Getting Started with plot2()","what":"Basic Usage: Let plot2() Do the Work","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"get started, can pass data directly plot2() without specifying additional arguments. example:  simple example, plot2() automatically generates column plot recognises x-axis categorical y-axis numeric. even adds data labels default x-axis discrete. Also, top y-axis bit space better able read plot, akin Microsoft Excel plots default. plot2() basic — need specify plot type worry details like labels scales. ’ll also notice clean, uncluttered appearance plot, especially compared default ggplot2 plot, thanks theme_minimal2(), applied default plot2(). Unlike ggplot2’s default theme_grey() features grey background, theme_minimal2() provides even spacious, white background reduces visual clutter optimised printing directly production formats like PDFs. makes plot2() plots ideal reports, publications, presentations clean, professional look essential.","code":"# Load the package library(plot2)  df <- data.frame(group = c(\"A\", \"B\", \"C\", \"D\"),                  values = c(105, 120, 114, 136)) df |>   plot2() #> i Using y = values #> i Using x = group"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"customising-the-plot-type","dir":"Articles","previous_headings":"Getting Started with plot2()","what":"Customising the Plot Type","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"want something different? Maybe scatter plot line chart? problem. can easily specify type argument get exactly want.  , ’ve explicitly set type = \"l\" create line plot. plot2() supports wide range plot types, can use either full name (type = \"geom_line\") abbreviation (type = \"line\", type = \"l\"). flexibility can save remembering multiple ggplot2 functions like geom_point(), geom_line(), geom_col(). plot2(), accessible simple type argument, making workflow intuitive.","code":"df |>    plot2(type = \"l\") #> i Using y = values #> i Using x = group"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"a-closer-look-at-the-axes","dir":"Articles","previous_headings":"Getting Started with plot2()","what":"A Closer Look at the Axes","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"One key strengths plot2() handles axes. x y arguments straightforward, come lot flexibility. Let’s start basics build advanced configurations.","code":""},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"setting-up-basic-axes","dir":"Articles","previous_headings":"Getting Started with plot2() > A Closer Look at the Axes","what":"Setting Up Basic Axes","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"create simple scatter plot, might pass single variable x y arguments:  creates scatter plot miles per gallon (mpg) horsepower (hp). basic gets — two variables, one axis. Also, plot2() always tries start zero x y (can set x.expand y.expand). ggplot(), default plot ‘zoomed ’ data region.","code":"mtcars |>   plot2(mpg, hp) #> i Using type = \"point\" since both axes are numeric"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"working-with-multiple-variables","dir":"Articles","previous_headings":"Getting Started with plot2() > A Closer Look at the Axes","what":"Working with Multiple Variables","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Now, want compare multiple variables plot? plot2() makes easy allowing pass vector variables:  example, plot2() plots hp disp mpg graph, using different colours visual distinctions separate . functionality replaces need pre-processing steps tidyr::pivot_longer() selected variables, simplifying code significantly.","code":"mtcars |>    plot2(x = mpg, y = c(hp, disp)) #> i Using type = \"point\" since both axes are numeric"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"delving-into-categories","dir":"Articles","previous_headings":"Getting Started with plot2()","what":"Delving into Categories","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Categories plot2() replace colour fill aesthetics ggplot2. category argument define data grouped. Let’s start simple example explore take .","code":""},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"basic-grouping","dir":"Articles","previous_headings":"Getting Started with plot2() > Delving into Categories","what":"Basic Grouping","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"basic use category argument might look something like :  , cyl variable used group data number cylinders, plot2() automatically assigns different colours group. particularly useful comparing subsets data within plot. ggplot2, typically involve specifying aes(colour = ...) aes(fill = ...) within geom function. plot2() simplifies handling directly category argument, reducing need manually setting aesthetics.","code":"mtcars |>    plot2(mpg, hp, category = cyl) #> i Using type = \"point\" since both axes are numeric"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"customising-categories","dir":"Articles","previous_headings":"Getting Started with plot2() > Delving into Categories","what":"Customising Categories","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"plot2() doesn’t stop . can fully customise categories displayed. instance, might want control colours used category:  , ’ve specified exact colours use category, giving full control appearance plot. approach mirrors scale_colour_manual() scale_fill_manual() ggplot2, streamlined integrated manner.","code":"mtcars |>    plot2(mpg, hp, category = cyl,         colour = c(\"4\" = \"red\", \"6\" = \"blue\", \"8\" = \"green\")) #> i Using type = \"point\" since both axes are numeric #> i Using category.midpoint = 7 (the current category scale centre)"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"exploring-facets","dir":"Articles","previous_headings":"Getting Started with plot2()","what":"Exploring Facets","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Faceting plot2() allows split plot multiple panels, one level categorical variable. ’s excellent way compare data across different groups.","code":""},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"basic-faceting","dir":"Articles","previous_headings":"Getting Started with plot2() > Exploring Facets","what":"Basic Faceting","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"simple example faceting might look like :  command splits plot number gears, giving separate panel group. quick way see relationships vary across different subsets data. ggplot2, achieving typically require facet_wrap(~ gear) facet_grid(gear ~ .). plot2(), achieve effect simple facet argument, making intuitive easier remember.","code":"mtcars |>    plot2(mpg, hp, facet = gear) #> i Using type = \"point\" since both axes are numeric #> i Assuming facet.fixed_x = TRUE since the three x scales differ by less than 25%"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"advanced-faceting-options","dir":"Articles","previous_headings":"Getting Started with plot2() > Exploring Facets","what":"Advanced Faceting Options","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"plot2() offers additional control facets displayed. can specify number rows facet grid, control whether scales fixed free, .  example, limit facet grid two rows ensure y-axes scale. simplifies ggplot2’s complex facet_wrap() options like scales = \"free_y\" nrow, often require additional parameters.","code":"mtcars |>    plot2(mpg, hp, facet = starts_with(\"g\"), facet.nrow = 2, facet.fixed_y = TRUE) #> i Using type = \"point\" since both axes are numeric #> i Assuming facet.fixed_x = TRUE since the three x scales differ by less than 25% #> i Assuming facet.repeat_lbls_y = FALSE since y has fixed scales"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"leveraging-inline-transformations-with-plot2","dir":"Articles","previous_headings":"Getting Started with plot2()","what":"Leveraging Inline Transformations with plot2()","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"One standout features plot2() ability perform transformations directly within function call. capability can dramatically reduce need additional data manipulation steps, allowing focus visualisation . Whether ’re calculating aggregates, formatting labels, even applying mathematical transformations, plot2() lets fly.","code":""},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"aggregations-made-easy","dir":"Articles","previous_headings":"Getting Started with plot2() > Leveraging Inline Transformations with plot2()","what":"Aggregations Made Easy","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Suppose want count number patients admitted hospital. plot2(), ’s need pre-calculate counts; can simply use n_distinct() get unique numbers patients directly within function:  produce column plot showing number admissions per hospital, calculated directly within plot2().","code":"admitted_patients |>    plot2(x = hospital,         y = n_distinct(patient_id))"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"combining-data-with-inline-transformations","dir":"Articles","previous_headings":"Getting Started with plot2() > Leveraging Inline Transformations with plot2()","what":"Combining Data with Inline Transformations","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"real power plot2() comes start combining inline transformations. Want add another dimension, like number unique age groups within hospital? can just easily:  , ifelse() category adds grouping date, counting number unique patients per ward per hospital, need additional code outside plot2(). didn’t need group_by() summarise() data beforehand — plot2() takes care , embedding transformation directly plot creation process. plot2(), tidyverse functions available without loading packages: %>%(), all_of(), any_of(), ends_with(), everything(), first(), last(), matches(), n(), n_distinct(), starts_with(), ().","code":"admitted_patients |>      plot2(x = hospital,           y = n_distinct(patient_id),           category = ifelse(date < \"2010-01-01\", \"Prior to 2010\", \"Since 2010\"),           facet = ward,           title = paste(\"Total of\", n(), \"patients\")) #> i To compare single values in two categories (ifelse(date < \"2010-01-01\", \"Prior to 2010\", \"Since 2010\")), a dumbbell plot can be used (type = \"dumbbell\" or type = \"d\") #> i Assuming facet.fixed_y = TRUE since the two y scales differ by less than 25% #> i Assuming facet.repeat_lbls_y = FALSE since y has fixed scales admitted_patients |>    plot2(x = hospital, y = median(age), category = gender) #> i To compare single values in two categories (gender), a dumbbell plot can be used (type = \"dumbbell\" or type = \"d\")"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"inline-math-transformations","dir":"Articles","previous_headings":"Getting Started with plot2() > Leveraging Inline Transformations with plot2()","what":"Inline Math Transformations","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"can also apply mathematical transformations directly within plot2(), making easy explore relationships data. example, plot logarithm patient ages across different wards, can :  traditional ggplot2 approach, might create new variable data logarithmic transformation (mutate(log_age = log(age))) plotting, scale_y_continuous(transform = \"log2\") y axis. plot2() handles seamlessly within plotting function .","code":"admitted_patients |>    plot2(x = log(age), y = n(), y.transform = \"log2\", category = ward) #> i Using type = \"point\" since both axes are numeric"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"advanced-formatting-on-the-fly","dir":"Articles","previous_headings":"Getting Started with plot2() > Leveraging Inline Transformations with plot2()","what":"Advanced Formatting on the Fly","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"addition aggregations, plot2() makes easy apply text transformations directly within plotting function. instance, might want format date combine different variables labels:  example creates plot x-axis labels combine text “Hospital” hospital name, categories based year extracted date variable. level flexibility allows highly customised plots without need extra preprocessing steps.","code":"admitted_patients |>    plot2(x = paste(\"Hospital\", hospital),         y = n(),         category = format(date, \"%Y\")) #> ! Omitting printing of 60 datalabels - use datalabels = TRUE to force printing"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"combining-everything-together","dir":"Articles","previous_headings":"Getting Started with plot2() > Leveraging Inline Transformations with plot2()","what":"Combining Everything Together","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Let’s put together complex example. Suppose want examine distribution patient ages across hospitals, bar split gender, want x-axis reflect hospital name use facets year admission:  plot, ’re using multiple inline transformations, showcasing use 8 lines code without using dplyr transformations manually. level complexity, achieved just one plot2() call, demonstrates power flexibility inline transformations.","code":"admitted_patients |>    plot2(x = ifelse(gender == \"F\", \"Females\", \"Males\"),         y = median(age),         category = format(date, \"%Y\"),         facet = paste(\"Hospital\", hospital),         x.title = \"\",         y.title = \"Median Patient Age\",         y.labels = function(x) paste(x, \"yrs\"),         category.title = \"Year\") #> i Assuming facet.fixed_y = TRUE since the four y scales differ by less than 25% #> i Assuming facet.repeat_lbls_y = FALSE since y has fixed scales #> ! Omitting printing of 106 datalabels - use datalabels = TRUE to force printing"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"sorting-and-limiting-data","dir":"Articles","previous_headings":"Getting Started with plot2()","what":"Sorting and Limiting Data","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Sorting crucial part data visualisation, helps bring clarity focus plots. plot2(), variety options sort data different directions. Whether want sort frequency, alphabetically, custom order, plot2() provides flexible powerful tools get job done. Limiting data helps keeping plots clean. want display top items, x.max_items category.max_items, facet.max_items got covered.","code":""},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"basic-sorting","dir":"Articles","previous_headings":"Getting Started with plot2() > Sorting and Limiting Data","what":"Basic Sorting","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Let’s start simple sort based frequency:  example, data sorted frequency carburettor counts descending order. particularly useful want highlight common categories data. command akin functionality provided arrange(desc(...)) combined geom_bar(stat = \"identity\"). However, plot2() condenses single, intuitive step.","code":"mtcars |>    plot2(carb, y = n(), x.sort = \"freq-desc\") #> i Using x.character = TRUE since x.sort is set"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"sorting-alphabetically","dir":"Articles","previous_headings":"Getting Started with plot2() > Sorting and Limiting Data","what":"Sorting Alphabetically","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"prefer sort alphabetically, plot2() makes straightforward. can use \"asc\" \"alpha\" sort data ascending alphabetical order:  command sort carburettor counts alphabetically, useful data naturally follows alphabetical order. ggplot2, achieving often involves using factor() levels reordering factors manually. plot2(), sorting becomes simple matter choosing appropriate argument.","code":"mtcars |>    plot2(carb, y = n(), x.sort = \"asc\") #> i Using x.character = TRUE since x.sort is set"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"sorting-with-a-custom-order","dir":"Articles","previous_headings":"Getting Started with plot2() > Sorting and Limiting Data","what":"Sorting with a Custom Order","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Sometimes, may want present data specific order doesn’t follow standard sorting method. can define custom order providing manual vector values:  example, carburettor counts displayed order 4, 1, 6, 8, regardless frequency alphabetical order. approach particularly useful want highlight certain categories follow logical sequence. ggplot2, typically involve setting levels manually within factor, can cumbersome. plot2() streamlines allowing custom orders directly within plot2() function call.","code":"mtcars |>    plot2(carb, y = n(), x.sort = c(4, 1, 6, 8)) #> i Using x.character = TRUE since x.sort is set"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"limiting-data","dir":"Articles","previous_headings":"Getting Started with plot2() > Sorting and Limiting Data","what":"Limiting Data","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"might always want show every single item plot. example, ’re dealing lot categories, can limit display just frequent ones:  limits plot top 5 frequent carburetor counts, simplifying visualisation making easier focus important data. ggplot2, might need filter data top_n() plotting. plot2() handles within plotting function, reducing need external data manipulation.","code":"mtcars |>    plot2(carb, y = n(), x.max_items = 5, type = \"col\") #> i Using x.character = TRUE for discrete plot type (geom_col) since carb is numeric"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"combining-sorting-with-limiting","dir":"Articles","previous_headings":"Getting Started with plot2() > Sorting and Limiting Data","what":"Combining Sorting with Limiting","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Sorting can combined features plot2() create sophisticated plots. example, might want sort frequency also limit number items displayed:  plot show top 5 frequent carburettor counts, sorted descending order. combination helps declutter visualisation focus significant parts data. ggplot2 approach, might involve combining arrange(), top_n(), geom_col(). plot2() consolidates operations single, coherent function call.","code":"mtcars |>    plot2(carb, y = n(), x.sort = \"freq-desc\", x.max_items = 5, type = \"col\") #> i Using x.character = TRUE for discrete plot type (geom_col) since carb is numeric"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"visualising-sorting-options","dir":"Articles","previous_headings":"Getting Started with plot2() > Sorting and Limiting Data","what":"Visualising Sorting Options","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"illustrate impact different sorting options, let’s create plot uses custom sort order highlights flexibility plot2():  example, age_group axis sorted custom order, “55-74” group first, followed “75+” “25-54”. bars stacked hospital, providing clear comparison across specified age groups. functionality parallels ggplot2’s ability reorder factors using forcats::fct_relevel() manually reordering levels within factor, less effort clarity.","code":"admitted_patients |>    plot2(x = age_group, y = n(), x.sort = c(\"55-74\", \"75+\", \"25-54\"), category = hospital, stacked = TRUE)"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"customising-colours","dir":"Articles","previous_headings":"Getting Started with plot2()","what":"Customising Colours","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Customising colours plot2() intuitive flexible. can use pre-set colour scales like viridis, define colours. colour colour_fill arguments control appearance plot.","code":""},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"using-pre-set-colour-scales","dir":"Articles","previous_headings":"Getting Started with plot2() > Customising Colours","what":"Using Pre-set Colour Scales","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"quick visually appealing colour scheme, might use viridis palette:  applies viridis colour scale, particularly good making sure plot accessible colour vision deficiencies. replaces need ggplot2’s scale_colour_viridis_c() scale_fill_viridis_c(), providing straightforward interface.","code":"mtcars |>    plot2(mpg, hp, category = cyl, colour = \"viridis\") #> i Using type = \"point\" since both axes are numeric"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"defining-custom-colours","dir":"Articles","previous_headings":"Getting Started with plot2() > Customising Colours","what":"Defining Custom Colours","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"want control, can define specific colours category:  can use colour implemented get_colour() function can understand, colour names HTML codes: importantly, can register new colours plot2 package. Let’s assume six colours style university/company/etc.: can now use colours plots!  approach mirrors ggplot2’s scale_colour_manual() added layer flexibility register_colour() function. makes easier maintain consistent branding theme-specific colours across multiple plots.","code":"mtcars |>    plot2(mpg, hp, category = cyl, colour = c(\"4\" = \"red\", \"6\" = \"blue\", \"8\" = \"green\")) #> i Using type = \"point\" since both axes are numeric #> i Using category.midpoint = 7 (the current category scale centre) get_colour(\"red\") #> [1] \"#FF0000\"  get_colour(\"#FF0000\") #> [1] \"#FF0000\"  get_colour(\"ff0000\") #> [1] \"#FF0000\"  get_colour(\"f00\") #> [1] \"#FF0000\" register_colour(navy_blue = \"#1F3A93\",                 burnt_orange = \"#D35400\",                 forest_green = \"#2C6F47\",                 goldenrod_yellow = \"#DAA520\",                 slate_grey = \"#708090\",                 plum_purple = \"#8E4585\") #> 6 colours registered.  # Then register the whole colour list too: register_colour(OurOrganisation = c(\"navy_blue\", \"burnt_orange\",                                     \"forest_green\", \"goldenrod_yellow\",                                     \"slate_grey\", \"plum_purple\")) #> 1 colour registered. iris |>   plot2(x = Species, y = where(is.double), colour = \"OurOrganisation\") #> i Using y = c(Petal.Length, Petal.Width, Sepal.Length, Sepal.Width) #> i Using type = \"boxplot\" since all groups in Species and category contain at least three values"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"default-colours","dir":"Articles","previous_headings":"Getting Started with plot2() > Customising Colours","what":"Default Colours","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"default, plot2() sets colours, meaning uses ggplot2 colours. simple R options, easy switch another colour set. Default:  Using viridis colour palette:","code":"options(plot2.colour = \"viridis\") options(plot2.colour = \"magma\") # our previously set manual colour set: options(plot2.colour = \"OurOrganisation\")"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"advanced-plot-types-geographies-dumbbells-and-sankey-diagrams","dir":"Articles","previous_headings":"Getting Started with plot2()","what":"Advanced Plot Types: Geographies, Dumbbells and Sankey Diagrams","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"plot2() shines comes complex plot types. Let’s explore three advanced options: geography plots, dumbbell plots Sankey diagrams.","code":""},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"plotting-geometries-sf-objects","dir":"Articles","previous_headings":"Getting Started with plot2() > Advanced Plot Types: Geographies, Dumbbells and Sankey Diagrams","what":"Plotting geometries (sf objects)","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Objects class sf (simple feature) handled plot2() like data set; plot2() applies spatial functions geom_sf() geom_sf_text() automatically wherever needed. built-theme_minimal2() theme makes sure get clean map, removing unnecessarily verbose axes background colour. included netherlands data set sf object:  ggplot2 users typically need specify geom_sf() geom_sf_label() explicitly might spend extra time adjusting themes remove unnecessary axes background elements. plot2() simplifies integrating adjustments automatically.","code":"plot2(netherlands) #> i Using category = area_km2 #> i Using datalabels = province #> i Assuming datalabels.centroid = TRUE. Set to FALSE for a point-on-surface placing of datalabels."},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"dumbbell-plots-for-comparisons","dir":"Articles","previous_headings":"Getting Started with plot2() > Advanced Plot Types: Geographies, Dumbbells and Sankey Diagrams","what":"Dumbbell Plots for Comparisons","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Dumbbell plots excellent comparing two categories side side:  plot type particularly useful showing difference two related metrics across different groups. ggplot2, creating dumbbell plot often involves using geom_segment() geom_point() combination, precise manual adjustments aesthetics. plot2() offers straightforward, single-function alternative.","code":"admitted_patients |>    plot2(x = hospital,         y = n_distinct(patient_id),         category = gender,         type = \"dumbbell\")"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"creating-sankey-diagrams","dir":"Articles","previous_headings":"Getting Started with plot2() > Advanced Plot Types: Geographies, Dumbbells and Sankey Diagrams","what":"Creating Sankey Diagrams","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Sankey diagrams another powerful visualisation, perfect showing flow movement one state another:  Sankey plots great way visualise transitions, survival rates passengers Titanic across different classes age groups. ggplot2, Sankey diagrams require additional packages custom code. plot2() makes complex plot type accessible directly within function.","code":"Titanic |>    plot2(x = c(Class, Age, Survived), category = Sex, type = \"sankey\") #> ! Input class 'table' was transformed using `as.data.frame()` #> i Using y = Freq since `as.data.table()` on a `table` results in a 'Freq' column #> i Assuming sankey.remove_axes = TRUE"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"adding-elements-with-add_-functions","dir":"Articles","previous_headings":"Getting Started with plot2()","what":"Adding Elements with add_*() Functions","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Beyond basics, plot2() allows add layers elements plots add_*() functions. designed integrate seamlessly plot2() ggplot2.","code":""},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"adding-lines-points-and-columns","dir":"Articles","previous_headings":"Getting Started with plot2() > Adding Elements with add_*() Functions","what":"Adding Lines, Points, and Columns","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Adding line existing plot easy calling add_line():   adds line mean horsepower. add_*() functions automatically correct category, removing need pre-processing steps determine (case) mean. legend item can also added just setting legend.value. ggplot2, typically require adding geom_hline() aesthetic mapping. plot2() simplifies single function call.","code":"p <- mtcars |>    plot2(mpg, hp, as.character(cyl),         category.title = \"Cylinders\") #> i Using type = \"point\" since both axes are numeric  # Notice how plot2() adds 3 lines here, since `category` is set p |>    add_line(y = mean(hp)) p |>    add_line(y = mean(hp), colour = \"red\", legend.value = \"Average HP\")"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"adding-points","dir":"Articles","previous_headings":"Getting Started with plot2() > Adding Elements with add_*() Functions","what":"Adding Points","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Points can added highlight specific values observations:  example, add point median mpg hp, using cross shape larger size emphasis. mirrors geom_point() ggplot2 tightly integrated plot2()’s streamlined interface.","code":"p |>    add_point(x = median(mpg), y = median(hp), shape = 4, size = 10)"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"adding-columns","dir":"Articles","previous_headings":"Getting Started with plot2() > Adding Elements with add_*() Functions","what":"Adding Columns","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Adding columns just straightforward, can used create bar charts similar visualisations:  , add columns based number cylinders, making easy compare counts across different groups. replaces geom_col() geom_bar(stat = \"identity\") ggplot2, maintaining simplicity directness.","code":"p |>    add_col(x = cyl, y = n(), width = 0.5)"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"plotting-error-bars","dir":"Articles","previous_headings":"Getting Started with plot2() > Adding Elements with add_*() Functions","what":"Plotting Error Bars","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Plotting error bars just simple:  adds error bars plot, showing range ±10 around hp values. plot2() abstracts away complexities geom_errorbar(), offering intuitive syntax.","code":"p |>    add_errorbar(min = hp - 10, max = hp + 10) #> $inherit.aes #> [1] FALSE #>  #> $width #> [1] 0.5 #>  #> [1] FALSE"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"adding-spatial-features-with-add_sf","dir":"Articles","previous_headings":"Getting Started with plot2() > Adding Elements with add_*() Functions","what":"Adding Spatial Features with add_sf()","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"working geographic data, add_sf() makes easy integrate spatial features:  example adds spatial features plot Netherlands, extra border around provinces. ggplot2 users typically use geom_sf() purpose, plot2() integrates directly, making geographic plotting accessible.","code":"plot2(netherlands) |>    add_sf(netherlands, colour_fill = NA, colour = \"red\", linewidth = 2) #> i Using category = area_km2 #> i Using datalabels = province #> i Assuming datalabels.centroid = TRUE. Set to FALSE for a point-on-surface placing of datalabels."},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"customising-fonts-in-plot2","dir":"Articles","previous_headings":"Getting Started with plot2()","what":"Customising Fonts in plot2()","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"Another powerful feature plot2() flexibility fonts. Whether ’re aiming professional look, something playful, anything , plot2() allows easily customise fonts suit needs.","code":""},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"using-system-fonts-and-google-fonts","dir":"Articles","previous_headings":"Getting Started with plot2() > Customising Fonts in plot2()","what":"Using System Fonts and Google Fonts","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"plot2() supports installed system fonts, well 1,400 Google Fonts, giving extensive range choices plots. Missing fonts downloaded automatically, required DPI set , even R Markdown outputs. ’s can apply custom font Google Fonts, downloaded automatically:  example, Rock Salt font, playful hand-drawn style, applied across plot. ggplot2, using custom fonts often requires extra handling using showtext package manual adjustments theme settings. plot2() simplifies integrating showtext core, including automatic downloading font scaling.","code":"mtcars |>    plot2(mpg, hp, wt * 1000,         facet = ifelse(vs == 0, \"V-shaped Engine\", \"Straight Engine\"),         font = \"Rock Salt\",         title = \"Custom Font Example\",          x.title = \"Miles per US gallon\",         y.title = \"Gross Horsepower\",         category.title = \"Weight (lbs)\",         facet.fixed_y = TRUE) #> i Using type = \"point\" since both axes are numeric #> i Assuming facet.fixed_x = TRUE since the two x scales differ by less than 25% #> i Assuming facet.repeat_lbls_y = FALSE since y has fixed scales"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"creating-consistent-themes-with-fonts","dir":"Articles","previous_headings":"Getting Started with plot2() > Customising Fonts in plot2()","what":"Creating Consistent Themes with Fonts","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"setting font options globally R options, can maintain consistent styling across multiple plots. particularly useful preparing series visualisations report presentation.  example, plots now use Lobster font, ensuring consistent appearance across visualisations. text_factor argument shows can used scale text size plot elements, ensuring readability aesthetic balance. Customising fonts plot2() flexible straightforward, allowing tailor typography plots match project’s style. Whether ’re using system font one many Google Fonts, plot2() makes easy create visually appealing consistent plots minimal effort.","code":"options(plot2.font = \"Lobster\") options(plot2.colour = \"viridis\")  mtcars |>    plot2(mpg, hp, title = \"Consistent Font Example\",         text_factor = 1.5) #> i Using type = \"point\" since both axes are numeric # reset again options(plot2.font = NULL, plot2.colour = NULL)"},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"discussion","dir":"Articles","previous_headings":"","what":"Discussion","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"plot2() just wrapper ggplot2; embodies philosophy simplifying streamlining plotting process building robust foundation ggplot2 provides. ’re familiar ggplot2, know explicit, detailed approach plot creation one greatest strengths, allowing unparalleled control every aspect visualisation. However, power comes need repetitive coding certain level complexity can challenging, especially beginners.","code":""},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"enhancing-workflow-efficiency","dir":"Articles","previous_headings":"Discussion","what":"Enhancing Workflow Efficiency","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"primary goal plot2() make data visualisation faster intuitive automating many routine tasks involved creating plots. Whether ’re working simple data complex datasets requiring advanced transformations, plot2() helps get final visualisation fewer lines code less cognitive load. speeds workflow also makes code readable maintainable. instance, ability perform inline transformations directly within plotting function eliminates need pre-processing steps otherwise require additional code blocks using, e.g., dplyr tidyr. feature plot2() alone can drastically reduce complexity code, especially working large multifaceted datasets.","code":""},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"a-natural-extension-of-ggplot2","dir":"Articles","previous_headings":"Discussion","what":"A Natural Extension of ggplot2","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"ggplot2 established cornerstone data visualisation R, good reason. layer-based approach extensive customisation options make incredibly powerful. plot2() designed complement strengths offering streamlined interface automates many common tasks ggplot2. Think plot2() natural extension ggplot2 — one retains underlying power simplifying process, especially users prefer direct path data visualisation. add_*() functions exemplify philosophy allowing users add layers elements minimal code, maintaining flexibility ggplot2 reducing need repetitive boilerplate. makes easier experiment different visualisations iterate quickly designs.","code":""},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"flexibility-without-complexity","dir":"Articles","previous_headings":"Discussion","what":"Flexibility Without Complexity","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"One key advantages plot2() retains flexibility ggplot2 reducing need detailed specification. automatic handling plot types, axis settings, scales means can create sophisticated plots minimal input. Yet, need take control, plot2() offers options expect, custom sorting precise colour control font selection. balance flexibility simplicity makes plot2() powerful tool beginners experienced users. Beginners can quickly produce high-quality plots without getting bogged details, advanced users can still leverage full power ggplot2 necessary.","code":""},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"philosophical-underpinnings","dir":"Articles","previous_headings":"Discussion","what":"Philosophical Underpinnings","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"heart plot2() commitment making data visualisation accessible less intimidating. goal lower barriers entry creating professional-quality plots, thereby empowering people engage data meaningful way. aligns broader trend R community tidyverse towards creating tools powerful easy use. plot2() also designed understanding every user needs — wants — expert intricacies ggplot2. providing sensible defaults automating common tasks, plot2() allows users focus important part visualisation process: interpreting communicating data.","code":""},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"reflecting-on-usage-scenarios","dir":"Articles","previous_headings":"Discussion","what":"Reflecting on Usage Scenarios","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"real value plot2() becomes evident real-world usage scenarios. Whether ’re creating quick exploratory plot preparing polished visualisation publication, plot2() adapts needs. versatility makes suitable wide range applications, routine data analysis sophisticated data storytelling. Moreover, plot2() integrates seamlessly broader tidyverse ecosystem. works effortlessly tidyverse packages, allowing incorporate existing workflows without disruption. ensures can continue use tools ’re familiar benefiting efficiencies plot2() brings.","code":""},{"path":"https://msberends.github.io/plot2/articles/plot2.html","id":"looking-forward","dir":"Articles","previous_headings":"Discussion","what":"Looking Forward","title":"A Gentle Introduction to `plot2()`: Enhancing Your `ggplot2` Workflow","text":"R community continues evolve, tools use data visualisation. plot2() represents step towards user-friendly efficient future, focus insights communication rather technical details. ’s tool grows — whether ’re just starting pushing boundaries ’s possible data visualisation. end, success tool measured well meets needs users. plot2() designed deep understanding challenges frustrations come creating complex plots R. addressing challenges head-, plot2() aims make data visualisation journey smoother, enjoyable, ultimately productive.","code":""},{"path":"https://msberends.github.io/plot2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthijs S. Berends. Author, maintainer.","code":""},{"path":"https://msberends.github.io/plot2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Berends MS (2024). plot2: Plotting Assistant Fast 'ggplot2' Visualisations. R package version 1.25.0.9000, https://github.com/msberends/plot2, https://msberends.github.io/plot2.","code":"@Manual{,   title = {plot2: A Plotting Assistant for Fast 'ggplot2' Visualisations},   author = {Matthijs S. Berends},   year = {2024},   note = {R package version 1.25.0.9000, https://github.com/msberends/plot2},   url = {https://msberends.github.io/plot2}, }"},{"path":"https://msberends.github.io/plot2/index.html","id":"plot2-simplified-and-enhanced-data-visualisation-in-r","dir":"","previous_headings":"","what":"A Plotting Assistant for Fast ggplot2 Visualisations","title":"A Plotting Assistant for Fast ggplot2 Visualisations","text":"plot2 simple yet powerful extension ggplot2, designed streamline process creating high-quality data visualisations R taking away work. Built philosophy Less Typing, Plotting, plot2 automates many routine tasks typically require manual intervention ggplot2. plotting --fly, even renders pre-processing steps , e.g., dplyr, tidyr forcats largely superfluous. package allows focus insights stories data can tell, rather intricate details plot construction. comprehensive guide using plot2, including advanced features customisation options, please see full vignette .","code":""},{"path":"https://msberends.github.io/plot2/index.html","id":"philosophy","dir":"","previous_headings":"","what":"Philosophy","title":"A Plotting Assistant for Fast ggplot2 Visualisations","text":"ggplot2 versatile tool become cornerstone data visualisation R, giving users unparalleled control plots. However, flexibility often comes need repetitive verbose code, especially routine tasks setting axis labels, choosing plot types, transforming data. plot2 designed complement ggplot2 offering streamlined intuitive interface. simplifies process creating plots automatically handling many details, without sacrificing flexibility power ggplot2 provides. Whether ’re quickly exploring data preparing polished visualisation publication, plot2 helps get faster less code.","code":""},{"path":"https://msberends.github.io/plot2/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"A Plotting Assistant for Fast ggplot2 Visualisations","text":"Plotting Lines Possible: need type ggplot(), geom_col(), aes(), scale_colour_manual(), facet_wrap() theme() anymore, just one plot2() call suffice. Automatic Plot Selection: plot2 automatically chooses best plot type based data, saving time effort. Inline Data Transformations: Eliminate need manual pre-processing steps e.g. dplyr tidyr, performing data transformations directly within plotting function, even axis plot titles. Enhanced Sorting Faceting: Easily sort facet data simple arguments, streamlining creation complex multi-panel plots. New Clean Theme: Includes theme_minimal2(), new minimalist theme based theme_minimal() optimised clear professional outputs, therefore perfect PDF publications, scientific manuscripts, presentations. Seamless Integration ggplot2: Retain power flexibility ggplot2 benefiting plot2’s streamlined interface.","code":""},{"path":"https://msberends.github.io/plot2/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Plotting Assistant for Fast ggplot2 Visualisations","text":"can install latest version plot2 :","code":"# Directly from R Universe install.packages(\"plot2\",                  repos = c(options()$repos, \"https://msberends.r-universe.dev\"))  # from GitHub using the 'remotes' package remotes::install_github(\"msberends/plot2\")"},{"path":"https://msberends.github.io/plot2/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"A Plotting Assistant for Fast ggplot2 Visualisations","text":"’s easy get started plot2:","code":"library(plot2)  # Like plot(), just pass x, y in the way you prefer plot2(mtcars, mpg, hp) mtcars |> plot2(mpg, hp) mtcars %>% plot2(mpg, hp) plot2(hp ~ mpg, data = mtcars)  # Use inline transformations mtcars |>    plot2(x = log(mpg), y = sqrt(hp))  # Select using tidyselect language iris |>   plot2(x = Species, y = where(is.double))  # Count with n() or n_distinct(), sort by frequency mtcars |>    plot2(carb, y = n(), x.sort = \"freq-desc\")    # Easily add plot types using the pipe iris |>   plot2(x = Sepal.Length,         y = Sepal.Width,         category = Species) |>   add_line(y = mean(Sepal.Width)) # adds 3 lines, for each of `Species`  # Lose the need for seperate grouping and summarising admitted_patients |>    plot2(x = hospital,         y = n_distinct(patient_id),         category = ifelse(date < \"2010-01-01\", \"Prior to 2010\", \"Since 2010\"),         facet = ward)"},{"path":"https://msberends.github.io/plot2/index.html","id":"getting-involved","dir":"","previous_headings":"","what":"Getting Involved","title":"A Plotting Assistant for Fast ggplot2 Visualisations","text":"welcome contributions plot2, whether ’s reporting issues, suggesting features, submitting pull requests. ’re familiar ggplot2 tidyverse, insights especially valuable continue develop refine package.","code":""},{"path":"https://msberends.github.io/plot2/index.html","id":"previous-iteration","dir":"","previous_headings":"","what":"Previous Iteration","title":"A Plotting Assistant for Fast ggplot2 Visualisations","text":"Though released August 2024, package years development hundreds Git commits earlier iteration .","code":""},{"path":"https://msberends.github.io/plot2/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"A Plotting Assistant for Fast ggplot2 Visualisations","text":"project licensed GNU GPL v2.0 License - see LICENSE file details.","code":""},{"path":"https://msberends.github.io/plot2/reference/add_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Additional Mapping — add_mapping","title":"Add Additional Mapping — add_mapping","text":"function can used adjust mapping plot.","code":""},{"path":"https://msberends.github.io/plot2/reference/add_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Additional Mapping — add_mapping","text":"","code":"add_mapping(plot, ...)"},{"path":"https://msberends.github.io/plot2/reference/add_mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Additional Mapping — add_mapping","text":"plot ggplot2 plot ... arguments passed ggplot2::aes()","code":""},{"path":"https://msberends.github.io/plot2/reference/add_mapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Additional Mapping — add_mapping","text":"","code":"p <- iris |> plot2(Sepal.Length, Sepal.Width, Species, zoom = TRUE) #> i Using type = \"point\" since both axes are numeric p   p |> add_mapping(shape = Species)"},{"path":"https://msberends.github.io/plot2/reference/add_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Plot Element — add_type","title":"Add Plot Element — add_type","text":"Quickly conveniently add new 'geom' existing plot2/ggplot model. Like plot2(), functions support tidy evaluation, meaning variables can unquoted. Better yet, can contain function output length, vector. can added using pipe (new base R's |> tidyverse's %>%).","code":""},{"path":"https://msberends.github.io/plot2/reference/add_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Plot Element — add_type","text":"","code":"add_type(plot, type = NULL, mapping = aes(), ..., data = NULL, move = 0)  add_line(   plot,   y = NULL,   x = NULL,   colour = getOption(\"plot2.colour\", \"ggplot2\"),   linetype,   linewidth,   ...,   inherit.aes = NULL,   move = 0,   legend.value = NULL )  add_point(   plot,   y = NULL,   x = NULL,   colour = getOption(\"plot2.colour\", \"ggplot2\"),   size,   shape,   ...,   inherit.aes = NULL,   move = 0,   legend.value = NULL )  add_col(   plot,   y = NULL,   x = NULL,   colour = getOption(\"plot2.colour\", \"ggplot2\"),   colour_fill,   width,   ...,   inherit.aes = NULL,   move = 0,   legend.value = NULL )  add_errorbar(   plot,   min,   max,   colour = getOption(\"plot2.colour\", \"ggplot2\"),   width = 0.5,   ...,   inherit.aes = NULL,   move = 0 )  add_sf(   plot,   sf_data,   colour = getOption(\"plot2.colour_sf\", \"grey50\"),   colour_fill = getOption(\"plot2.colour_sf_fill\", getOption(\"plot2.colour\", \"ggplot2\")),   size = 2,   linewidth = 0.1,   datalabels = NULL,   datalabels.colour = \"black\",   datalabels.size = 3,   datalabels.angle = 0,   datalabels.font = getOption(\"plot2.font\"),   datalabels.nudge_y = 2500,   ...,   inherit.aes = FALSE )"},{"path":"https://msberends.github.io/plot2/reference/add_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Plot Element — add_type","text":"plot ggplot2 plot type ggplot2 geom name, geoms supported. Full function names can used (e.g., \"geom_line\"), can also abbreviated (e.g., \"l\", \"line\"). geoms can abbreviated first character: area (\"\"), boxplot (\"b\"), column (\"c\"), histogram (\"h\"), jitter (\"j\"), line (\"l\"), point (\"p\"), ribbon (\"r\"), violin (\"v\"). mapping mapping created aes() pass geom data data use mapping move number layers move newly added geom , e.g., move = 1 place newly added geom 1 layer, thus directly highest layer x, y aesthetic arguments colour, colour_fill colour line column, evaluated get_colour(). colour_fill missing colour given, colour_fill inherit colour set colour. linetype, linewidth, shape, size, width, ... arguments passed geom inherit.aes logical indicate whether default aesthetics inherited, rather combining legend.value text show additional legend created. Since ggplot2 actually support , may give false-positive warnings messages, \"Removed 1 row containing missing values values outside scale range\". min, max minimum (lower) maximum (upper) values error bars sf_data 'sf' data.frame datalabels column sf_data add label points datalabels.colour, datalabels.size, datalabels.angle, datalabels.font properties datalabels datalabels.nudge_y datalabels NULL, amount vertical adjustment datalabels (positive value: North, negative value: South)","code":""},{"path":"https://msberends.github.io/plot2/reference/add_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Plot Element — add_type","text":"ggplot object","code":""},{"path":"https://msberends.github.io/plot2/reference/add_type.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Plot Element — add_type","text":"function add_line() add: geom_hline() y provided; geom_vline() x provided; geom_line() cases. function add_errorbar() adds error bars y values, see Examples.","code":""},{"path":"https://msberends.github.io/plot2/reference/add_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Plot Element — add_type","text":"","code":"head(iris) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa                   p <- iris |>   plot2(x = Sepal.Length,         y = Sepal.Width,         category = Species,         zoom = TRUE) #> i Using type = \"point\" since both axes are numeric p     # if not specifying x or y, current plot data are taken p |> add_line()     # single values for add_line() will plot 'hline' or 'vline' # even considering the `category` if set p |>    add_line(y = mean(Sepal.Width))   # set `colour` to ignore existing colours # and use `legend.value` to add a legend p |>    add_line(y = mean(Sepal.Width),            colour = \"red\",            legend.value = \"Average\")     p |>    add_line(x = mean(Sepal.Length)) |>    add_line(y = mean(Sepal.Width))     p |>   add_point(x = median(Sepal.Length),             y = median(Sepal.Width),             shape = 13,             size = 25,             show.legend = FALSE)     # multiple values will just plot multiple lines p |>    add_line(y = fivenum(Sepal.Width),            colour = \"blue\",            legend.value = \"Tukey's Numbers\")     p |>    add_line(y = quantile(Sepal.Width, c(0.25, 0.5, 0.75)),            colour = c(\"red\", \"black\", \"red\"),            linewidth = 1)     # use move to move the new layer down p |>    add_point(size = 5,             colour = \"lightpink\",             move = -1)   # providing x and y will just plot the points as new data, p |>    add_point(y = 2:4,             x = 5:7,             colour = \"red\",             size = 5)  # even with expanded grid if x and y are not of the same length p |>    add_point(y = 2:4,             x = 5:8,             colour = \"red\",             size = 5)   # any mathematical transformation of current values is supported df <- data.frame(var_1 = c(1:100),                  var_2 = rnorm(100, 100, 25),                  var_3 = rep(LETTERS[1:5], 5)) df |>   plot2(var_1, var_2) |>    add_line(y = mean(var_2),             linetype = 3,            legend.value = \"Average\") |>   add_col(y = var_2 / 5,           width = 0.25,           colour = \"blue\",           legend.value = \"This *is* **some** symbol: $beta$\") #> i Using type = \"point\" since both axes are numeric #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_col()`).   # plotting error bars was never easier library(\"dplyr\", warn.conflicts = FALSE) df2 <- df |>    as_tibble() |>    slice(1:25) |>   filter(var_1 <= 50) |>    mutate(error1 = var_2 * 0.9,          error2 = var_2 * 1.1)  df2 #> # A tibble: 25 × 5 #>    var_1 var_2 var_3 error1 error2 #>    <int> <dbl> <chr>  <dbl>  <dbl> #>  1     1 106.  A       95.7  117.  #>  2     2  39.1 B       35.2   43.0 #>  3     3  99.9 C       89.9  110.  #>  4     4 116.  D      104.   127.  #>  5     5 129.  E      116.   142.  #>  6     6  54.5 A       49.0   59.9 #>  7     7  93.8 B       84.4  103.  #>  8     8  93.9 C       84.5  103.  #>  9     9  92.9 D       83.6  102.  #> 10    10  86.2 E       77.5   94.8 #> # ℹ 15 more rows  df2 |>    plot2(var_1, var_2, var_3, type = \"col\", datalabels = FALSE, alpha = 0.25, width = 0.75) |>    # adding error bars was never easier - just reference the lower and upper values   add_errorbar(error1, error2) #> i This additional argument is given to the geom: alpha #> i Using x.character = TRUE for discrete plot type (geom_col) since var_1 is numeric #> $inherit.aes #> [1] FALSE #>  #> $width #> [1] 0.5 #>  #> [1] FALSE   # adding sf objects is just as convenient as all else plot2(netherlands) #> i Using category = area_km2 #> i Using datalabels = province #> i Assuming datalabels.centroid = TRUE. Set to FALSE for a point-on-surface placing of datalabels.  plot2(netherlands) |>   add_sf(netherlands, colour_fill = NA, colour = \"red\", linewidth = 1) #> i Using category = area_km2 #> i Using datalabels = province #> i Assuming datalabels.centroid = TRUE. Set to FALSE for a point-on-surface placing of datalabels."},{"path":"https://msberends.github.io/plot2/reference/admitted_patients.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Data Set with Admitted Patients — admitted_patients","title":"Example Data Set with Admitted Patients — admitted_patients","text":"auto-generated data set containing fictitious patients admitted hospitals.","code":""},{"path":"https://msberends.github.io/plot2/reference/admitted_patients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Data Set with Admitted Patients — admitted_patients","text":"","code":"admitted_patients"},{"path":"https://msberends.github.io/plot2/reference/admitted_patients.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Data Set with Admitted Patients — admitted_patients","text":"tibble/data.frame 250 observations 7 variables: date date hospital admission patient_id ID patient (fictitious) gender gender patient age age patient age_group age group age patient, generated AMR::age_groups() hospital ID hospital, D ward type ward, either ICU Non-ICU","code":""},{"path":"https://msberends.github.io/plot2/reference/colour.html","id":null,"dir":"Reference","previous_headings":"","what":"Colours from R, Viridis and More — get_colour","title":"Colours from R, Viridis and More — get_colour","text":"Colours R, viridis . output prints console actual colours.","code":""},{"path":"https://msberends.github.io/plot2/reference/colour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colours from R, Viridis and More — get_colour","text":"","code":"get_colour(x, length = 1, opacity = 0)  register_colour(...)  # S3 method for class 'colour' as.character(x, ...)  # S3 method for class 'colour' print(x, ...)  add_white(x, white)"},{"path":"https://msberends.github.io/plot2/reference/colour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colours from R, Viridis and More — get_colour","text":"x colour colour palette name. Input can : One colourblind-safe viridisLite palettes: \"viridis\" \"magma\" \"inferno\" \"plasma\" \"cividis\" \"rocket\" \"mako\" \"turbo\" One built-palettes R (R 4.4.1): \"Accent\" \"Alphabet\" \"Classic Tableau\" \"Dark 2\" \"Okabe-Ito\" \"Paired\" \"Pastel 1\" \"Pastel 2\" \"Polychrome 36\" \"R3\" \"R4\" \"Set 1\" \"Set 2\" \"Set 3\" \"Tableau 10\" \"ggplot2\" \"grayscale\" \"greyscale\" \"heatmap\" \"rainbow\" \"terrain\" \"topo\" One 657 built-colours() R (even case-insensitive), \"blanchedalmond\", \"darkolivegreen1\", \"goldenrod1\", \"powderblue\", \"springgreen3\" One pre-registered colours using register_colour() length size vector returned opacity amount opacity (0 = solid, 1 = transparent) ... named vectors known, valid colours. must coercible get_colour(). white number [0, 1] add white x","code":""},{"path":"https://msberends.github.io/plot2/reference/colour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Colours from R, Viridis and More — get_colour","text":"character vector HTML format (.e., \"#AABBCC\") new class colour","code":""},{"path":"https://msberends.github.io/plot2/reference/colour.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Colours from R, Viridis and More — get_colour","text":"palette R expanded needed, even get_colour(\"R4\", length = 20) work, despite \"R4\" supporting maximum eight colours.","code":""},{"path":"https://msberends.github.io/plot2/reference/colour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Colours from R, Viridis and More — get_colour","text":"","code":"get_colour(c(\"red\", \"tan1\", \"#ffa\", \"FFAA00\")) #> [1] \"#FF0000\"  \"#FFA54F\"  \"#FFFFAA\"  \"#FFAA00\"    par(mar = c(0.5, 2.5, 1.5, 0)) # set plot margins for below plots  # all colourblind-safe colour palettes from the famous viridisLite package barplot(1:7,         col = get_colour(\"viridis\", 7))  barplot(1:7,         col = get_colour(\"magma\", 7))   barplot(8:1,         col = get_colour(\"R4\", 8),         main = \"Some palettes have only 8 colours...\")  barplot(20:1,         col = get_colour(\"R4\", 20),         main = \"Not anymore!\")    # Registering Colours --------------------------------------------------  # to register colours, use named input - the values will be evaluated # with get_colour() get_colour(\"red123\") #> Warning: Invalid colours, replacing with grey: red123 #> [1] \"#B6B6B6\"   register_colour(red123 = \"red\", red456 = \"#ff0000\", red789 = \"f00\") #> 3 colours registered. get_colour(\"red123\") #> [1] \"#FF0000\"   get_colour(\"red456\") #> [1] \"#FF0000\"   get_colour(\"red789\") #> [1] \"#FF0000\"    # you can also register a group name register_colour(red_group = c(\"red123\", \"ff4400\", \"red3\", \"red4\")) #> 1 colour registered. get_colour(\"red_group\") #> [1] \"#FF0000\"   get_colour(\"red_group\", 3) #> [1] \"#FF0000\"  \"#FF4400\"  \"#CD0000\"    # Registering colours is ideal for your (organisational) style in plots. # Let's say these are your style: register_colour(navy_blue = \"#1F3A93\",                 burnt_orange = \"#D35400\",                 forest_green = \"#2C6F47\",                 goldenrod_yellow = \"#DAA520\",                 slate_grey = \"#708090\",                 plum_purple = \"#8E4585\") #> 6 colours registered.  # Then register the whole colour list too: register_colour(my_organisation = c(\"navy_blue\", \"burnt_orange\",                                     \"forest_green\", \"goldenrod_yellow\",                                     \"slate_grey\", \"plum_purple\")) #> 1 colour registered. # Check that it works: get_colour(\"my_organisation\", length = 6) #> [1] \"#1F3A93\"  \"#D35400\"  \"#2C6F47\"  \"#DAA520\"  \"#708090\"  \"#8E4585\"    # Now use it in plots as you like: iris |>   plot2(x = Species, y = where(is.double), colour = \"my_organisation\") #> i Using y = c(Petal.Length, Petal.Width, Sepal.Length, Sepal.Width) #> i Using type = \"boxplot\" since all groups in Species and category contain at least three values   # Or even set the option to use it in any future plot: options(plot2.colour = \"my_organisation\")  iris |>   plot2(x = Species, y = where(is.double)) #> i Using y = c(Petal.Length, Petal.Width, Sepal.Length, Sepal.Width) #> i Using type = \"boxplot\" since all groups in Species and category contain at least three values   # reset option again options(plot2.colour = NULL)   # Use add_white() to add white to existing colours: colours <- get_colour(\"R4\", 6) colours #> [1] \"#000000\"  \"#DF536B\"  \"#61D04F\"  \"#2297E6\"  \"#28E2E5\"  \"#CD0BBC\"   add_white(colours, 0.25) #> [1] \"#3F3F3F\"  \"#E77E90\"  \"#88DB7B\"  \"#59B1EC\"  \"#5DE9EB\"  \"#D948CC\"   add_white(colours, 0.5) #> [1] \"#7F7F7F\"  \"#EFA9B5\"  \"#B0E7A7\"  \"#90CBF2\"  \"#93F0F2\"  \"#E685DD\"   add_white(colours, 0.75) #> [1] \"#BFBFBF\"  \"#F7D4DA\"  \"#D7F3D3\"  \"#C7E5F8\"  \"#C9F7F8\"  \"#F2C2EE\"    add_white(\"red\", 1/128) #> [1] \"#FF0202\"   add_white(\"red\", 1/64) #> [1] \"#FF0404\"   add_white(\"red\", 1/32) #> [1] \"#FF0808\""},{"path":"https://msberends.github.io/plot2/reference/dec_mark.html","id":null,"dir":"Reference","previous_headings":"","what":"Use Decimal Comma? — dec_mark","title":"Use Decimal Comma? — dec_mark","text":"functions determine characters decimal mark big mark used plotting. base determination getOption(\"OutDec\"), also base::format() uses.","code":""},{"path":"https://msberends.github.io/plot2/reference/dec_mark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use Decimal Comma? — dec_mark","text":"","code":"dec_mark()  big_mark()"},{"path":"https://msberends.github.io/plot2/reference/dec_mark.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use Decimal Comma? — dec_mark","text":"option \"dec_mark\" set, value used dec_mark() either comma full stop. default, big_mark() returns full stop dec_mark() returns comma, space otherwise. option \"big_mark\" set, value used either comma (\",\") full stop (\".\") space (\" \") empty character (\"\").","code":""},{"path":"https://msberends.github.io/plot2/reference/dec_mark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use Decimal Comma? — dec_mark","text":"","code":"# at default, this follows `getOption(\"OutDec\")`: dec_mark() #> [1] \".\" # and big_mark() returns a space if dec_mark() returns \".\": big_mark() #> [1] \" \"  # you you can set options to alter behaviour: options(dec_mark = \",\", big_mark = \".\") dec_mark() #> [1] \",\" big_mark() #> [1] \".\"  options(dec_mark = \",\", big_mark = NULL) dec_mark() #> [1] \",\" big_mark() #> [1] \".\"  options(big_mark = \",\") dec_mark() #> [1] \",\" big_mark() #> [1] \",\"  # clean up options(dec_mark = NULL, big_mark = NULL)"},{"path":"https://msberends.github.io/plot2/reference/get_plot_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Plot Title — get_plot_title","title":"Get Plot Title — get_plot_title","text":"Get title plot, default value. title set plot, function tries generate one plot mapping.","code":""},{"path":"https://msberends.github.io/plot2/reference/get_plot_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Plot Title — get_plot_title","text":"","code":"get_plot_title(plot, valid_filename = TRUE, default = NULL)"},{"path":"https://msberends.github.io/plot2/reference/get_plot_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Plot Title — get_plot_title","text":"plot ggplot2 plot valid_filename logical indicate whether returned value valid filename, defaults TRUE default default value, plot title absent","code":""},{"path":"https://msberends.github.io/plot2/reference/get_plot_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Plot Title — get_plot_title","text":"","code":"without_title <- plot2(mtcars) #> i Using x = mpg #> i Using y = cyl #> i Using type = \"point\" since both axes are numeric with_title <- plot2(mtcars, title = \"Plotting **mpg** vs. **cyl**!\") #> i Using x = mpg #> i Using y = cyl #> i Using type = \"point\" since both axes are numeric  # default is a guess: get_plot_title(without_title) #> [1] \"cyl_per_mpg\" get_plot_title(without_title, valid_filename = FALSE) #> [1] \"Cyl per mpg\" get_plot_title(with_title) #> [1] \"plotting_mpg_vs_cyl\" get_plot_title(with_title, valid_filename = FALSE) #> [1] \"Plotting mpg vs. cyl!\"  # unless 'default' is set (only affects plots without title): get_plot_title(without_title, default = \"title\") #> [1] \"title\" get_plot_title(with_title, default = \"title\") #> [1] \"plotting_mpg_vs_cyl\""},{"path":"https://msberends.github.io/plot2/reference/labellers.html","id":null,"dir":"Reference","previous_headings":"","what":"Label Euro currencies — labellers","title":"Label Euro currencies — labellers","text":"Format numbers currency, rounding values dollars cents using convenient heuristic.","code":""},{"path":"https://msberends.github.io/plot2/reference/labellers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label Euro currencies — labellers","text":"","code":"euros(x, big.mark = big_mark(), decimal.mark = dec_mark(), ...)  dollars(x, big.mark = big_mark(), decimal.mark = dec_mark(), ...)"},{"path":"https://msberends.github.io/plot2/reference/labellers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label Euro currencies — labellers","text":"x values big.mark thousands separator, defaults big_mark() decimal.mark decimal mark, defaults dec_mark() ... argument give geom. override automatically-set settings geom.","code":""},{"path":"https://msberends.github.io/plot2/reference/labellers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label Euro currencies — labellers","text":"","code":"if (FALSE) { # \\dontrun{ profit <- data.frame(group = LETTERS[1:4],                      profit = runif(4, 10000, 25000))  profit |>   plot2(y.labels = euros,         datalabels = FALSE)          profit |>   plot2(y.labels = euros,         datalabels.format = euros) } # }"},{"path":"https://msberends.github.io/plot2/reference/md_to_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Markdown to Plotmath Expression — md_to_expression","title":"Convert Markdown to Plotmath Expression — md_to_expression","text":"function converts common markdown language R plotmath expression. plot2() uses function internally convert plot titles axis titles.","code":""},{"path":"https://msberends.github.io/plot2/reference/md_to_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Markdown to Plotmath Expression — md_to_expression","text":"","code":"md_to_expression(x)"},{"path":"https://msberends.github.io/plot2/reference/md_to_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Markdown to Plotmath Expression — md_to_expression","text":"x text convert, first value evaluated","code":""},{"path":"https://msberends.github.io/plot2/reference/md_to_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Markdown to Plotmath Expression — md_to_expression","text":"expression x length 1, list expressions otherwise","code":""},{"path":"https://msberends.github.io/plot2/reference/md_to_expression.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Markdown to Plotmath Expression — md_to_expression","text":"function supports common markdown (italic, bold, bold-italic, subscript, superscript), also supports additional functionalities advanced expressions using R plotmath. Please see Examples. plot2(), function can also set argument category.labels print data values expressions: plot2(..., category.labels = md_to_expression)","code":""},{"path":"https://msberends.github.io/plot2/reference/md_to_expression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Markdown to Plotmath Expression — md_to_expression","text":"","code":"# use '*' for italics, not '_', to prevent conflicts with variable naming md_to_expression(\"this is *italic* text, this is _not italic_ text\") #> expression(paste(\"this is \", italic(\"italic\"), \" text, this is _not italic_ text\"))  md_to_expression(\"this is **bold** text\") #> expression(paste(\"this is \", bold(\"bold\"), \" text\"))  md_to_expression(\"this is ***bold and italic*** text\") #> expression(paste(\"this is \", bolditalic(\"bold and italic\"), \" text\"))  # subscript and superscript can be done in HTML or markdown with curly brackets: md_to_expression(\"this is some<sub>subscripted text<\/sub>, this is also_{subscripted} text\") #> expression(paste(\"this is \", some[\"subscripted text\"], \", this is \",  #>     also[\"subscripted\"], \" text\")) md_to_expression(\"this is some<sup>superscripted text<\/sup>, this is also^{superscripted} text\") #> expression(paste(\"this is \", some^\"superscripted text\", \", this is also\"^\"superscripted\",  #>     \" text\"))  # use $...$ to use any plotmath expression as-is (see ?plotmath): md_to_expression(\"text $omega$ text, $a[x]$\") #> expression(paste(\"text \", omega, \" text, \", a[x]))  mtcars |>   plot2(mpg, hp,         title = \"*These are* the **Greek** lower $omega$ and upper $Omega$\",         x.title = \"x_{mpg}\",         y.title = \"y_{hp}\") #> i Using type = \"point\" since both axes are numeric           mtcars |>    plot2(mpg, hp,         title = \"$f[X](x)==frac(1, sigma*sqrt(2*pi))*plain(e)^{frac(-(x-mu)^2, 2*sigma^2)}$\",         subtitle = \"Some insane $widehat(plotmath)$ title\") #> i Using type = \"point\" since both axes are numeric"},{"path":"https://msberends.github.io/plot2/reference/move_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Move a ggplot Layer — move_layer","title":"Move a ggplot Layer — move_layer","text":"Use function move certain plot layer . function returns ggplot object.","code":""},{"path":"https://msberends.github.io/plot2/reference/move_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move a ggplot Layer — move_layer","text":"","code":"move_layer(plot, move = -1, layer = length(plot$layers))"},{"path":"https://msberends.github.io/plot2/reference/move_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move a ggplot Layer — move_layer","text":"plot ggplot object move number layers move layer layer layer affect, defaults top layer","code":""},{"path":"https://msberends.github.io/plot2/reference/netherlands.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Geography Data Set: the Netherlands — netherlands","title":"Example Geography Data Set: the Netherlands — netherlands","text":"data set containing geometies twelve provinces Netherlands, according Statistics Netherlands (2021).","code":""},{"path":"https://msberends.github.io/plot2/reference/netherlands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Geography Data Set: the Netherlands — netherlands","text":"","code":"netherlands"},{"path":"https://msberends.github.io/plot2/reference/netherlands.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Geography Data Set: the Netherlands — netherlands","text":"data.frame 12 observations 3 variables: province name Dutch province area_km2 area square kilometres geometry geometry province, class sfc_MULTIPOLYGON/sfc","code":""},{"path":"https://msberends.github.io/plot2/reference/plot2-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for plot2() — plot2-methods","title":"Methods for plot2() — plot2-methods","text":"implemented methods different S3 classes used plot2(). Since extensive list arguments, placed separate manual page.","code":""},{"path":"https://msberends.github.io/plot2/reference/plot2-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for plot2() — plot2-methods","text":"","code":"# Default S3 method plot2(   .data,   x = NULL,   y = NULL,   category = NULL,   facet = NULL,   type = NULL,   x.title = TRUE,   y.title = TRUE,   category.title = NULL,   title = NULL,   subtitle = NULL,   caption = NULL,   tag = NULL,   title.linelength = 60,   title.colour = getOption(\"plot2.colour_font_primary\", \"black\"),   subtitle.linelength = 60,   subtitle.colour = getOption(\"plot2.colour_font_secondary\", \"grey35\"),   na.replace = \"\",   na.rm = FALSE,   facet.position = \"top\",   facet.fill = NULL,   facet.bold = TRUE,   facet.italic = FALSE,   facet.size = 10,   facet.margin = 8,   facet.repeat_lbls_x = TRUE,   facet.repeat_lbls_y = NULL,   facet.fixed_y = NULL,   facet.fixed_x = NULL,   facet.drop = FALSE,   facet.nrow = NULL,   facet.relative = FALSE,   x.date_breaks = NULL,   x.date_labels = NULL,   x.date_remove_years = NULL,   category.focus = NULL,   colour = getOption(\"plot2.colour\", \"ggplot2\"),   colour_fill = NULL,   colour_opacity = 0,   x.lbl_angle = 0,   x.lbl_align = NULL,   x.lbl_italic = FALSE,   x.lbl_taxonomy = FALSE,   x.remove = FALSE,   x.position = \"bottom\",   x.max_items = Inf,   x.max_txt = \"(rest, x%n)\",   category.max_items = Inf,   category.max_txt = \"(rest, x%n)\",   facet.max_items = Inf,   facet.max_txt = \"(rest, x%n)\",   x.breaks = NULL,   x.n_breaks = NULL,   x.transform = \"identity\",   x.expand = NULL,   x.limits = NULL,   x.labels = NULL,   x.character = NULL,   x.drop = FALSE,   x.mic = FALSE,   x.zoom = FALSE,   y.remove = FALSE,   y.24h = FALSE,   y.age = FALSE,   y.scientific = NULL,   y.percent = FALSE,   y.percent_break = 0.1,   y.breaks = NULL,   y.n_breaks = NULL,   y.limits = NULL,   y.labels = NULL,   y.expand = NULL,   y.transform = \"identity\",   y.position = \"left\",   y.zoom = FALSE,   y_secondary = NULL,   y_secondary.type = type,   y_secondary.title = TRUE,   y_secondary.colour = get_colour(getOption(\"plot2.colour\", \"ggplot2\"), 2),   y_secondary.colour_fill = get_colour(getOption(\"plot2.colour\", \"ggplot2\"), 2),   y_secondary.scientific = NULL,   y_secondary.percent = FALSE,   y_secondary.labels = NULL,   category.labels = NULL,   category.percent = FALSE,   category.breaks = NULL,   category.limits = NULL,   category.expand = 0,   category.midpoint = NULL,   category.transform = \"identity\",   category.date_breaks = NULL,   category.date_labels = NULL,   category.character = NULL,   x.sort = NULL,   category.sort = TRUE,   facet.sort = TRUE,   x.complete = NULL,   category.complete = NULL,   facet.complete = NULL,   datalabels = TRUE,   datalabels.round = ifelse(y.percent, 2, 1),   datalabels.format = \"%n\",   datalabels.colour = \"grey25\",   datalabels.colour_fill = NULL,   datalabels.size = (3 * text_factor),   datalabels.angle = 0,   datalabels.lineheight = 1,   decimal.mark = dec_mark(),   big.mark = big_mark(),   summarise_function = base::sum,   stacked = FALSE,   stackedpercent = FALSE,   horizontal = FALSE,   reverse = horizontal,   smooth = NULL,   smooth.method = NULL,   smooth.formula = NULL,   smooth.se = TRUE,   smooth.level = 0.95,   smooth.alpha = 0.25,   smooth.linewidth = 0.75,   smooth.linetype = 3,   smooth.colour = NULL,   size = NULL,   linetype = 1,   linewidth = NULL,   binwidth = NULL,   width = NULL,   jitter_seed = NA,   violin_scale = \"count\",   legend.position = NULL,   legend.title = NULL,   legend.reverse = FALSE,   legend.barheight = 6,   legend.barwidth = 1.5,   legend.nbin = 300,   legend.italic = FALSE,   sankey.node_width = 0.15,   sankey.node_whitespace = 0.03,   sankey.alpha = 0.5,   sankey.remove_axes = NULL,   zoom = FALSE,   sep = \" / \",   print = FALSE,   text_factor = 1,   font = getOption(\"plot2.font\"),   theme = getOption(\"plot2.theme\", \"theme_minimal2\"),   background = getOption(\"plot2.colour_background\", \"white\"),   markdown = TRUE,   ... )  # S3 method for class 'formula' plot2(   .data = NULL,   x = NULL,   y = NULL,   category = NULL,   facet = NULL,   type = NULL,   x.title = TRUE,   y.title = TRUE,   category.title = NULL,   title = NULL,   subtitle = NULL,   caption = NULL,   tag = NULL,   title.linelength = 60,   title.colour = getOption(\"plot2.colour_font_primary\", \"black\"),   subtitle.linelength = 60,   subtitle.colour = getOption(\"plot2.colour_font_secondary\", \"grey35\"),   na.replace = \"\",   na.rm = FALSE,   facet.position = \"top\",   facet.fill = NULL,   facet.bold = TRUE,   facet.italic = FALSE,   facet.size = 10,   facet.margin = 8,   facet.repeat_lbls_x = TRUE,   facet.repeat_lbls_y = NULL,   facet.fixed_y = NULL,   facet.fixed_x = NULL,   facet.drop = FALSE,   facet.nrow = NULL,   facet.relative = FALSE,   x.date_breaks = NULL,   x.date_labels = NULL,   x.date_remove_years = NULL,   category.focus = NULL,   colour = getOption(\"plot2.colour\", \"ggplot2\"),   colour_fill = NULL,   colour_opacity = 0,   x.lbl_angle = 0,   x.lbl_align = NULL,   x.lbl_italic = FALSE,   x.lbl_taxonomy = FALSE,   x.remove = FALSE,   x.position = \"bottom\",   x.max_items = Inf,   x.max_txt = \"(rest, x%n)\",   category.max_items = Inf,   category.max_txt = \"(rest, x%n)\",   facet.max_items = Inf,   facet.max_txt = \"(rest, x%n)\",   x.breaks = NULL,   x.n_breaks = NULL,   x.transform = \"identity\",   x.expand = NULL,   x.limits = NULL,   x.labels = NULL,   x.character = NULL,   x.drop = FALSE,   x.mic = FALSE,   x.zoom = FALSE,   y.remove = FALSE,   y.24h = FALSE,   y.age = FALSE,   y.scientific = NULL,   y.percent = FALSE,   y.percent_break = 0.1,   y.breaks = NULL,   y.n_breaks = NULL,   y.limits = NULL,   y.labels = NULL,   y.expand = NULL,   y.transform = \"identity\",   y.position = \"left\",   y.zoom = FALSE,   y_secondary = NULL,   y_secondary.type = type,   y_secondary.title = TRUE,   y_secondary.colour = get_colour(getOption(\"plot2.colour\", \"ggplot2\"), 2),   y_secondary.colour_fill = get_colour(getOption(\"plot2.colour\", \"ggplot2\"), 2),   y_secondary.scientific = NULL,   y_secondary.percent = FALSE,   y_secondary.labels = NULL,   category.labels = NULL,   category.percent = FALSE,   category.breaks = NULL,   category.limits = NULL,   category.expand = 0,   category.midpoint = NULL,   category.transform = \"identity\",   category.date_breaks = NULL,   category.date_labels = NULL,   category.character = NULL,   x.sort = NULL,   category.sort = TRUE,   facet.sort = TRUE,   x.complete = NULL,   category.complete = NULL,   facet.complete = NULL,   datalabels = TRUE,   datalabels.round = ifelse(y.percent, 2, 1),   datalabels.format = \"%n\",   datalabels.colour = \"grey25\",   datalabels.colour_fill = NULL,   datalabels.size = (3 * text_factor),   datalabels.angle = 0,   datalabels.lineheight = 1,   decimal.mark = dec_mark(),   big.mark = big_mark(),   summarise_function = base::sum,   stacked = FALSE,   stackedpercent = FALSE,   horizontal = FALSE,   reverse = horizontal,   smooth = NULL,   smooth.method = NULL,   smooth.formula = NULL,   smooth.se = TRUE,   smooth.level = 0.95,   smooth.alpha = 0.25,   smooth.linewidth = 0.75,   smooth.linetype = 3,   smooth.colour = NULL,   size = NULL,   linetype = 1,   linewidth = NULL,   binwidth = NULL,   width = NULL,   jitter_seed = NA,   violin_scale = \"count\",   legend.position = NULL,   legend.title = NULL,   legend.reverse = FALSE,   legend.barheight = 6,   legend.barwidth = 1.5,   legend.nbin = 300,   legend.italic = FALSE,   sankey.node_width = 0.15,   sankey.node_whitespace = 0.03,   sankey.alpha = 0.5,   sankey.remove_axes = NULL,   zoom = FALSE,   sep = \" / \",   print = FALSE,   text_factor = 1,   font = getOption(\"plot2.font\"),   theme = getOption(\"plot2.theme\", \"theme_minimal2\"),   background = getOption(\"plot2.colour_background\", \"white\"),   markdown = TRUE,   data = NULL,   ... )  # S3 method for class 'freq' plot2(   .data,   x = .data$item,   y = .data$count,   category = NULL,   facet = NULL,   type = NULL,   x.title = \"Item\",   y.title = \"Count\",   category.title = TRUE,   title = NULL,   subtitle = NULL,   caption = NULL,   tag = NULL,   title.linelength = 60,   title.colour = getOption(\"plot2.colour_font_primary\", \"black\"),   subtitle.linelength = 60,   subtitle.colour = getOption(\"plot2.colour_font_secondary\", \"grey35\"),   na.replace = \"\",   na.rm = FALSE,   facet.position = \"top\",   facet.fill = NULL,   facet.bold = TRUE,   facet.italic = FALSE,   facet.size = 10,   facet.margin = 8,   facet.repeat_lbls_x = TRUE,   facet.repeat_lbls_y = NULL,   facet.fixed_y = NULL,   facet.fixed_x = NULL,   facet.drop = FALSE,   facet.nrow = NULL,   facet.relative = FALSE,   x.date_breaks = NULL,   x.date_labels = NULL,   x.date_remove_years = NULL,   category.focus = NULL,   colour = getOption(\"plot2.colour\", \"ggplot2\"),   colour_fill = NULL,   colour_opacity = 0,   x.lbl_angle = 0,   x.lbl_align = NULL,   x.lbl_italic = FALSE,   x.lbl_taxonomy = FALSE,   x.remove = FALSE,   x.position = \"bottom\",   x.max_items = Inf,   x.max_txt = \"(rest, x%n)\",   category.max_items = Inf,   category.max_txt = \"(rest, x%n)\",   facet.max_items = Inf,   facet.max_txt = \"(rest, x%n)\",   x.breaks = NULL,   x.n_breaks = NULL,   x.transform = \"identity\",   x.expand = NULL,   x.limits = NULL,   x.labels = NULL,   x.character = NULL,   x.drop = FALSE,   x.mic = FALSE,   x.zoom = FALSE,   y.remove = FALSE,   y.24h = FALSE,   y.age = FALSE,   y.scientific = NULL,   y.percent = FALSE,   y.percent_break = 0.1,   y.breaks = NULL,   y.n_breaks = NULL,   y.limits = NULL,   y.labels = NULL,   y.expand = NULL,   y.transform = \"identity\",   y.position = \"left\",   y.zoom = FALSE,   y_secondary = NULL,   y_secondary.type = type,   y_secondary.title = TRUE,   y_secondary.colour = get_colour(getOption(\"plot2.colour\", \"ggplot2\"), 2),   y_secondary.colour_fill = get_colour(getOption(\"plot2.colour\", \"ggplot2\"), 2),   y_secondary.scientific = NULL,   y_secondary.percent = FALSE,   y_secondary.labels = NULL,   category.labels = NULL,   category.percent = FALSE,   category.breaks = NULL,   category.limits = NULL,   category.expand = 0,   category.midpoint = NULL,   category.transform = \"identity\",   category.date_breaks = NULL,   category.date_labels = NULL,   category.character = NULL,   x.sort = \"freq-desc\",   category.sort = TRUE,   facet.sort = TRUE,   x.complete = NULL,   category.complete = NULL,   facet.complete = NULL,   datalabels = TRUE,   datalabels.round = ifelse(y.percent, 2, 1),   datalabels.format = \"%n\",   datalabels.colour = \"grey25\",   datalabels.colour_fill = NULL,   datalabels.size = (3 * text_factor),   datalabels.angle = 0,   datalabels.lineheight = 1,   decimal.mark = dec_mark(),   big.mark = big_mark(),   summarise_function = base::sum,   stacked = FALSE,   stackedpercent = FALSE,   horizontal = FALSE,   reverse = horizontal,   smooth = NULL,   smooth.method = NULL,   smooth.formula = NULL,   smooth.se = TRUE,   smooth.level = 0.95,   smooth.alpha = 0.25,   smooth.linewidth = 0.75,   smooth.linetype = 3,   smooth.colour = NULL,   size = NULL,   linetype = 1,   linewidth = NULL,   binwidth = NULL,   width = NULL,   jitter_seed = NA,   violin_scale = \"count\",   legend.position = NULL,   legend.title = NULL,   legend.reverse = FALSE,   legend.barheight = 6,   legend.barwidth = 1.5,   legend.nbin = 300,   legend.italic = FALSE,   sankey.node_width = 0.15,   sankey.node_whitespace = 0.03,   sankey.alpha = 0.5,   sankey.remove_axes = NULL,   zoom = FALSE,   sep = \" / \",   print = FALSE,   text_factor = 1,   font = getOption(\"plot2.font\"),   theme = getOption(\"plot2.theme\", \"theme_minimal2\"),   background = getOption(\"plot2.colour_background\", \"white\"),   markdown = TRUE,   ... )  # S3 method for class 'sf' plot2(   .data,   x = NULL,   y = NULL,   category = NULL,   facet = NULL,   type = NULL,   x.title = FALSE,   y.title = FALSE,   category.title = NULL,   title = NULL,   subtitle = NULL,   caption = NULL,   tag = NULL,   title.linelength = 60,   title.colour = getOption(\"plot2.colour_font_primary\", \"black\"),   subtitle.linelength = 60,   subtitle.colour = getOption(\"plot2.colour_font_secondary\", \"grey35\"),   na.replace = \"\",   na.rm = FALSE,   facet.position = \"top\",   facet.fill = NULL,   facet.bold = TRUE,   facet.italic = FALSE,   facet.size = 10,   facet.margin = 8,   facet.repeat_lbls_x = TRUE,   facet.repeat_lbls_y = NULL,   facet.fixed_y = NULL,   facet.fixed_x = NULL,   facet.drop = FALSE,   facet.nrow = NULL,   facet.relative = FALSE,   x.date_breaks = NULL,   x.date_labels = NULL,   x.date_remove_years = NULL,   category.focus = NULL,   colour = getOption(\"plot2.colour_sf\", \"grey50\"),   colour_fill = getOption(\"plot2.colour_sf_fill\", getOption(\"plot2.colour\", \"ggplot2\")),   colour_opacity = 0,   x.lbl_angle = 0,   x.lbl_align = NULL,   x.lbl_italic = FALSE,   x.lbl_taxonomy = FALSE,   x.remove = FALSE,   x.position = \"bottom\",   x.max_items = Inf,   x.max_txt = \"(rest, x%n)\",   category.max_items = Inf,   category.max_txt = \"(rest, x%n)\",   facet.max_items = Inf,   facet.max_txt = \"(rest, x%n)\",   x.breaks = NULL,   x.n_breaks = NULL,   x.transform = \"identity\",   x.expand = 0,   x.limits = NULL,   x.labels = NULL,   x.character = NULL,   x.drop = FALSE,   x.mic = FALSE,   x.zoom = FALSE,   y.remove = FALSE,   y.24h = FALSE,   y.age = FALSE,   y.scientific = NULL,   y.percent = FALSE,   y.percent_break = 0.1,   y.breaks = NULL,   y.n_breaks = NULL,   y.limits = NULL,   y.labels = NULL,   y.expand = 0,   y.transform = \"identity\",   y.position = \"left\",   y.zoom = FALSE,   y_secondary = NULL,   y_secondary.type = type,   y_secondary.title = TRUE,   y_secondary.colour = get_colour(getOption(\"plot2.colour\", \"ggplot2\"), 2),   y_secondary.colour_fill = get_colour(getOption(\"plot2.colour\", \"ggplot2\"), 2),   y_secondary.scientific = NULL,   y_secondary.percent = FALSE,   y_secondary.labels = NULL,   category.labels = NULL,   category.percent = FALSE,   category.breaks = NULL,   category.limits = NULL,   category.expand = 0,   category.midpoint = NULL,   category.transform = \"identity\",   category.date_breaks = NULL,   category.date_labels = NULL,   category.character = NULL,   x.sort = NULL,   category.sort = TRUE,   facet.sort = TRUE,   x.complete = NULL,   category.complete = NULL,   facet.complete = NULL,   datalabels = TRUE,   datalabels.round = ifelse(y.percent, 2, 1),   datalabels.format = NULL,   datalabels.colour = \"black\",   datalabels.colour_fill = NULL,   datalabels.size = (3 * text_factor),   datalabels.angle = 0,   datalabels.lineheight = 1,   decimal.mark = dec_mark(),   big.mark = big_mark(),   summarise_function = base::sum,   stacked = FALSE,   stackedpercent = FALSE,   horizontal = FALSE,   reverse = horizontal,   smooth = NULL,   smooth.method = NULL,   smooth.formula = NULL,   smooth.se = TRUE,   smooth.level = 0.95,   smooth.alpha = 0.25,   smooth.linewidth = 0.75,   smooth.linetype = 3,   smooth.colour = NULL,   size = NULL,   linetype = 1,   linewidth = NULL,   binwidth = NULL,   width = NULL,   jitter_seed = NA,   violin_scale = \"count\",   legend.position = \"right\",   legend.title = NULL,   legend.reverse = FALSE,   legend.barheight = 6,   legend.barwidth = 1.5,   legend.nbin = 300,   legend.italic = FALSE,   sankey.node_width = 0.15,   sankey.node_whitespace = 0.03,   sankey.alpha = 0.5,   sankey.remove_axes = NULL,   zoom = FALSE,   sep = \" / \",   print = FALSE,   text_factor = 1,   font = getOption(\"plot2.font\"),   theme = theme_minimal2(panel.grid.major = element_blank(), panel.grid.minor =     element_blank(), panel.border = element_blank(), plot.margin = unit(c(5, 5, 0, 0),     units = \"pt\"), axis.title = element_blank(), axis.text = element_blank(), axis.line =     element_blank(), axis.ticks = element_blank()),   background = getOption(\"plot2.colour_background\", \"white\"),   markdown = TRUE,   data = NULL,   crs = NULL,   datalabels.centroid = NULL,   ... )  # S3 method for class 'data.frame' plot2(   .data,   x = NULL,   y = NULL,   category = NULL,   facet = NULL,   type = NULL,   x.title = TRUE,   y.title = TRUE,   category.title = NULL,   title = NULL,   subtitle = NULL,   caption = NULL,   tag = NULL,   title.linelength = 60,   title.colour = getOption(\"plot2.colour_font_primary\", \"black\"),   subtitle.linelength = 60,   subtitle.colour = getOption(\"plot2.colour_font_secondary\", \"grey35\"),   na.replace = \"\",   na.rm = FALSE,   facet.position = \"top\",   facet.fill = NULL,   facet.bold = TRUE,   facet.italic = FALSE,   facet.size = 10,   facet.margin = 8,   facet.repeat_lbls_x = TRUE,   facet.repeat_lbls_y = NULL,   facet.fixed_y = NULL,   facet.fixed_x = NULL,   facet.drop = FALSE,   facet.nrow = NULL,   facet.relative = FALSE,   x.date_breaks = NULL,   x.date_labels = NULL,   x.date_remove_years = NULL,   category.focus = NULL,   colour = getOption(\"plot2.colour\", \"ggplot2\"),   colour_fill = NULL,   colour_opacity = 0,   x.lbl_angle = 0,   x.lbl_align = NULL,   x.lbl_italic = FALSE,   x.lbl_taxonomy = FALSE,   x.remove = FALSE,   x.position = \"bottom\",   x.max_items = Inf,   x.max_txt = \"(rest, x%n)\",   category.max_items = Inf,   category.max_txt = \"(rest, x%n)\",   facet.max_items = Inf,   facet.max_txt = \"(rest, x%n)\",   x.breaks = NULL,   x.n_breaks = NULL,   x.transform = \"identity\",   x.expand = NULL,   x.limits = NULL,   x.labels = NULL,   x.character = NULL,   x.drop = FALSE,   x.mic = FALSE,   x.zoom = FALSE,   y.remove = FALSE,   y.24h = FALSE,   y.age = FALSE,   y.scientific = NULL,   y.percent = FALSE,   y.percent_break = 0.1,   y.breaks = NULL,   y.n_breaks = NULL,   y.limits = NULL,   y.labels = NULL,   y.expand = NULL,   y.transform = \"identity\",   y.position = \"left\",   y.zoom = FALSE,   y_secondary = NULL,   y_secondary.type = type,   y_secondary.title = TRUE,   y_secondary.colour = get_colour(getOption(\"plot2.colour\", \"ggplot2\"), 2),   y_secondary.colour_fill = get_colour(getOption(\"plot2.colour\", \"ggplot2\"), 2),   y_secondary.scientific = NULL,   y_secondary.percent = FALSE,   y_secondary.labels = NULL,   category.labels = NULL,   category.percent = FALSE,   category.breaks = NULL,   category.limits = NULL,   category.expand = 0,   category.midpoint = NULL,   category.transform = \"identity\",   category.date_breaks = NULL,   category.date_labels = NULL,   category.character = NULL,   x.sort = NULL,   category.sort = TRUE,   facet.sort = TRUE,   x.complete = NULL,   category.complete = NULL,   facet.complete = NULL,   datalabels = TRUE,   datalabels.round = ifelse(y.percent, 2, 1),   datalabels.format = \"%n\",   datalabels.colour = \"grey25\",   datalabels.colour_fill = NULL,   datalabels.size = (3 * text_factor),   datalabels.angle = 0,   datalabels.lineheight = 1,   decimal.mark = dec_mark(),   big.mark = big_mark(),   summarise_function = base::sum,   stacked = FALSE,   stackedpercent = FALSE,   horizontal = FALSE,   reverse = horizontal,   smooth = NULL,   smooth.method = NULL,   smooth.formula = NULL,   smooth.se = TRUE,   smooth.level = 0.95,   smooth.alpha = 0.25,   smooth.linewidth = 0.75,   smooth.linetype = 3,   smooth.colour = NULL,   size = NULL,   linetype = 1,   linewidth = NULL,   binwidth = NULL,   width = NULL,   jitter_seed = NA,   violin_scale = \"count\",   legend.position = NULL,   legend.title = NULL,   legend.reverse = FALSE,   legend.barheight = 6,   legend.barwidth = 1.5,   legend.nbin = 300,   legend.italic = FALSE,   sankey.node_width = 0.15,   sankey.node_whitespace = 0.03,   sankey.alpha = 0.5,   sankey.remove_axes = NULL,   zoom = FALSE,   sep = \" / \",   print = FALSE,   text_factor = 1,   font = getOption(\"plot2.font\"),   theme = getOption(\"plot2.theme\", \"theme_minimal2\"),   background = getOption(\"plot2.colour_background\", \"white\"),   markdown = TRUE,   ... )  # S3 method for class 'matrix' plot2(   .data,   x = NULL,   y = NULL,   category = NULL,   facet = NULL,   type = NULL,   x.title = FALSE,   y.title = FALSE,   category.title = NULL,   title = NULL,   subtitle = NULL,   caption = NULL,   tag = NULL,   title.linelength = 60,   title.colour = getOption(\"plot2.colour_font_primary\", \"black\"),   subtitle.linelength = 60,   subtitle.colour = getOption(\"plot2.colour_font_secondary\", \"grey35\"),   na.replace = \"\",   na.rm = FALSE,   facet.position = \"top\",   facet.fill = NULL,   facet.bold = TRUE,   facet.italic = FALSE,   facet.size = 10,   facet.margin = 8,   facet.repeat_lbls_x = TRUE,   facet.repeat_lbls_y = NULL,   facet.fixed_y = NULL,   facet.fixed_x = NULL,   facet.drop = FALSE,   facet.nrow = NULL,   facet.relative = FALSE,   x.date_breaks = NULL,   x.date_labels = NULL,   x.date_remove_years = NULL,   category.focus = NULL,   colour = getOption(\"plot2.colour\", \"ggplot2\"),   colour_fill = NULL,   colour_opacity = 0,   x.lbl_angle = 0,   x.lbl_align = NULL,   x.lbl_italic = FALSE,   x.lbl_taxonomy = FALSE,   x.remove = FALSE,   x.position = \"bottom\",   x.max_items = Inf,   x.max_txt = \"(rest, x%n)\",   category.max_items = Inf,   category.max_txt = \"(rest, x%n)\",   facet.max_items = Inf,   facet.max_txt = \"(rest, x%n)\",   x.breaks = NULL,   x.n_breaks = NULL,   x.transform = \"identity\",   x.expand = NULL,   x.limits = NULL,   x.labels = NULL,   x.character = NULL,   x.drop = FALSE,   x.mic = FALSE,   x.zoom = FALSE,   y.remove = FALSE,   y.24h = FALSE,   y.age = FALSE,   y.scientific = NULL,   y.percent = FALSE,   y.percent_break = 0.1,   y.breaks = NULL,   y.n_breaks = NULL,   y.limits = NULL,   y.labels = NULL,   y.expand = NULL,   y.transform = \"identity\",   y.position = \"left\",   y.zoom = FALSE,   y_secondary = NULL,   y_secondary.type = type,   y_secondary.title = TRUE,   y_secondary.colour = get_colour(getOption(\"plot2.colour\", \"ggplot2\"), 2),   y_secondary.colour_fill = get_colour(getOption(\"plot2.colour\", \"ggplot2\"), 2),   y_secondary.scientific = NULL,   y_secondary.percent = FALSE,   y_secondary.labels = NULL,   category.labels = NULL,   category.percent = FALSE,   category.breaks = NULL,   category.limits = NULL,   category.expand = 0,   category.midpoint = NULL,   category.transform = \"identity\",   category.date_breaks = NULL,   category.date_labels = NULL,   category.character = NULL,   x.sort = NULL,   category.sort = TRUE,   facet.sort = TRUE,   x.complete = NULL,   category.complete = NULL,   facet.complete = NULL,   datalabels = TRUE,   datalabels.round = ifelse(y.percent, 2, 1),   datalabels.format = \"%n\",   datalabels.colour = \"grey25\",   datalabels.colour_fill = NULL,   datalabels.size = (3 * text_factor),   datalabels.angle = 0,   datalabels.lineheight = 1,   decimal.mark = dec_mark(),   big.mark = big_mark(),   summarise_function = base::sum,   stacked = FALSE,   stackedpercent = FALSE,   horizontal = FALSE,   reverse = horizontal,   smooth = NULL,   smooth.method = NULL,   smooth.formula = NULL,   smooth.se = TRUE,   smooth.level = 0.95,   smooth.alpha = 0.25,   smooth.linewidth = 0.75,   smooth.linetype = 3,   smooth.colour = NULL,   size = NULL,   linetype = 1,   linewidth = NULL,   binwidth = NULL,   width = NULL,   jitter_seed = NA,   violin_scale = \"count\",   legend.position = NULL,   legend.title = NULL,   legend.reverse = FALSE,   legend.barheight = 6,   legend.barwidth = 1.5,   legend.nbin = 300,   legend.italic = FALSE,   sankey.node_width = 0.15,   sankey.node_whitespace = 0.03,   sankey.alpha = 0.5,   sankey.remove_axes = NULL,   zoom = FALSE,   sep = \" / \",   print = FALSE,   text_factor = 1,   font = getOption(\"plot2.font\"),   theme = getOption(\"plot2.theme\", \"theme_minimal2\"),   background = getOption(\"plot2.colour_background\", \"white\"),   markdown = TRUE,   ... )"},{"path":"https://msberends.github.io/plot2/reference/plot2-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for plot2() — plot2-methods","text":".data, data data plot x plotting 'direction' x axis. can : single variable .data, x = column1 function calculate one variables .data, x = format(column1, \"%Y\"), x = ifelse(column1 == \"\", \"Group \", \"\") Multiple variables .data, x = c(column1, column2, column2), using selection helpers x = (.character) x = starts_with(\"var_\") (allowed required Sankey plots using type = \"sankey\") y values use plotting along y axis. can : single variable .data, y = column1 Multiple variables .data, y = c(column1, column2) y = c(name1 = column1, \"name 2\" = column2), using selection helpers y = (.double) y = starts_with(\"var_\") (multiple variables allowed category set) function calculate .data returning single value, y = n() row count, based variables y = n_distinct(person_id), y = max(column1), y = median(column2) / column3 function calculate .data returning multiple values, y = quantile(column1, c(0.25, 0.75)) y = range(age)  (multiple values allowed category set) category, facet plotting 'direction' (category called 'fill' 'colour' ggplot2). can : single variable .data, category = column1 function calculate one variables .data, category = median(column2) / column3, facet = ifelse(column1 == \"\", \"Group \", \"\") Multiple variables .data, facet = c(column1, column2) (use sep control separator character) One variables .data using selection helpers, category = (.double) facet = starts_with(\"var_\") category can also date date/time (class Date POSIXt). type, y_secondary.type type visualisation use. can : ggplot2 geom name abbreviation \"col\" \"point\". geoms supported (including geom_blank()). Full function names can used (e.g., \"geom_histogram\"), can also abbreviated (e.g., \"h\", \"hist\"). following geoms can abbreviated first character: area (\"\"), boxplot (\"b\"), column (\"c\"), histogram (\"h\"), jitter (\"j\"), line (\"l\"), point (\"p\"), ribbon (\"r\"), violin (\"v\"). Please note: ggplot2, 'bars' 'columns' equal, common many people 'bars' oriented horizontally 'columns' oriented vertically since Microsoft Excel using terms way many years. reason, type = \"bar\" set type = \"col\" horizontal = TRUE. One additional types: \"barpercent\" (short: \"bp\"), effectively shortcut set type = \"col\" horizontal = TRUE x.max_items = 10 x.sort = \"freq-desc\" datalabels.format = \"%n (%p)\". \"linedot\" (short: \"ld\"), sets type = \"line\" adds two point geoms using add_point(); one large white dots one smaller dots using colours set colour. essentially equal base R plot(..., type = \"b\") closed shapes. \"dumbbell\" (short: \"d\"), sets type = \"point\" horizontal = TRUE, adds line points (using geom_segment()). line colour changed. plot type possible category two distinct values. \"sankey\" (short: \"s\") creates Sankey plots using category flows requires x contain multiple variables .data. default, also sets x.expand = c(0.05, 0.05) y.limits = c(NA, NA) y.expand = c(0.01, 0.01). -called 'nodes' ('blocks' text) considered datalabels, can set text size colour nodes using datalabels.size, datalabels.colour, datalabels.colour_fill. transparency flows can set using sankey.alpha, width nodes can set using sankey.node_width. Sankey plots can also flipped using horizontal = TRUE. Left blank. case, type determined automatically: \"boxplot\" x axis length unique values per x axis item least 3, \"point\" y x axes numeric, option \"plot2.default_type\" otherwise (defaults \"col\"). Use type = \"blank\" type = \"geom_blank\" add geom. title, subtitle, caption, tag, x.title, y.title, category.title, legend.title, y_secondary.title title use. can : character, supports markdown using md_to_expression() internally markdown = TRUE (default) function calculate .data, title = paste(\"Based n =\", n_distinct(person_id), \"individuals\") subtitle = paste(\"Total rows:\", n()), see Examples expression, e.g. using parse(text = \"...\") category.title defaults TRUE legend items numeric. title.linelength maximum number characters per line title, linebreak occurs title.colour text colour title subtitle.linelength maximum number characters per line subtitle, linebreak occurs subtitle.colour text colour subtitle na.replace character put place NA values na.rm = FALSE na.rm remove NA values showing plot facet.position, facet.fill, facet.bold, facet.italic, facet.size, facet.margin, facet.repeat_lbls_x, facet.repeat_lbls_y, facet.drop, facet.nrow, facet.relative additional settings plotting direction facet facet.fixed_y logical indicate whether y scales limits. Defaults TRUE coefficient variation (standard deviation divided mean) maximum values y less 25%. facet.fixed_x logical indicate whether x scales breaks. acts like inverse x.drop. x.date_breaks breaks use x axis contains dates, determined automatically left blank. accepts values \"1 day\" \"2 years\". x.date_labels labels use x axis contains dates, determined automatically left blank. accepts 'Excel' date-language \"d mmmm yyyy\". x.date_remove_years logical indicate whether years x values must unified. set years x values 1970 data contain leap year, 1972 otherwise. allows plot years category maintaining date range x. default FALSE, unless category contains years present x. category.focus value category highlighted, meaning values category greyed . can also numeric value 1 length unique values category, e.g. category.focus = 2 focus second legend item. colour get_colour(s) set, evaluated get_colour() set. can also one viridis colours automatic implementation plot: \"viridis\", \"magma\", \"inferno\", \"plasma\", \"cividis\", \"rocket\", \"mako\" \"turbo\". Also, can also named vector match values category, see Examples. Using named vector can also used manually sort values category. colour_fill get_colour(s) used filling, determined automatically left blank evaluated get_colour() colour_opacity amount opacity colour/colour_fill (0 = solid, 1 = transparent) x.lbl_angle angle use x axis counter-clockwise direction (.e., value 90 orient axis labels bottom top, value 270 orient axis labels top bottom) x.lbl_align alignment x axis 0 (left aligned) 1 (right aligned) x.lbl_italic logical indicate whether x labels italics x.lbl_taxonomy logical transform words x labels italics microorganisms data set AMR package. uses md_to_expression() internally set x.labels parse expressions. x.remove, y.remove logical indicate whether axis labels title removed x.position, y.position position axis x.max_items, category.max_items, facet.max_items number maximum items use, defaults infinite. values grouped summarised using summarise_function function. Please note: sorting applied first, allowing e.g. plot top n frequent values x axis combining x.sort = \"freq-desc\" x.max_items = n. x.max_txt, category.max_txt, facet.max_txt text use values included number *.max_items. placeholder %n replaced outcome summarise_function function, placeholder %p replaced percentage. x.breaks, y.breaks breaks function numeric vector use axis x.n_breaks, y.n_breaks number breaks, useful x.breaks cq. y.breaks NULL x.transform, y.transform, category.transform transformation function use, e.g. \"log2\". can : \"asinh\", \"asn\", \"atanh\", \"boxcox\", \"compose\", \"date\", \"exp\", \"hms\", \"identity\", \"log\", \"log10\", \"log1p\", \"log2\", \"logit\", \"modulus\", \"probability\", \"probit\", \"pseudo_log\", \"reciprocal\", \"reverse\", \"sqrt\", \"time\", \"timespan\", \"yj\". x.expand, y.expand expansion use axis, can length 1 2. x.expand defaults 0.5 y.expand defaults 0.25, except sf objects (default 0). x.limits, y.limits limits use axis, can length 1 2. Use NA highest lowest value data, e.g. y.limits = c(0, NA) y scale start zero. x.labels, y.labels, y_secondary.labels labels function character vector use axis x.character logical indicate whether values x axis forced character. default FALSE, except years (values 2000 2050) months (values 1 12). x.drop logical indicate whether factor levels dropped x.mic logical indicate whether x axis formatted MIC values, dropping factor levels adding missing factors 2 x.zoom, y.zoom logical indicate axis zoomed data, setting x.limits = c(NA, NA) x.expand = 0 x axis, y.limits = c(NA, NA) y.expand = 0 y axis y.24h logical indicate whether y labels breaks formatted 24-hour sequences y.age logical indicate whether y labels breaks formatted ages years y.scientific, y_secondary.scientific logical indicate whether y labels formatted scientific notation. Defaults TRUE range y values spans 10e5. y.percent, y_secondary.percent logical indicate whether y labels formatted percentages y.percent_break value y axis breaks y_secondary values use plotting along secondary y axis. functionality poorly supported ggplot2 might give unexpected results. Setting secondary y axis set colour axis titles. y_secondary.colour, y_secondary.colour_fill colours set secondary y axis, evaluated get_colour() category.labels, category.percent, category.breaks, category.expand, category.midpoint settings plotting direction category. category.limits limits use numeric category, can length 1 2. Use NA highest lowest value data, e.g. category.limits = c(0, NA) scale start zero. category.date_breaks breaks use category contains dates, determined automatically left blank. passed seq.Date(= ...) thus can : number, taken days, character string containing one \"day\", \"week\", \"month\", \"quarter\" \"year\" (optionally preceded integer space, /followed \"s\"). category.date_labels labels use category contains dates, determined automatically left blank. accepts 'Excel' date-language \"d mmmm yyyy\". category.character logical indicate whether values category forced character. default FALSE, except years (values 2000 2050) months (values 1 12). x.sort, category.sort, facet.sort sorting plotting direction, defaults TRUE, except continuous values x axis (dates numbers). Applying one sorting methods transform values ordered factor, ggplot2 uses orient data. Valid values : manual vector values TRUE: sort factors levels, otherwise sort ascending alphabet, maintaining numbers text (numeric sort) FALSE: sort according order data NULL: sort/transform \"asc\" \"alpha\": sort TRUE \"desc\": sort factors reversed levels, otherwise sort descending alphabet, maintaining numbers text (numeric sort) \"order\" \"inorder\": sort FALSE \"freq\" \"freq-desc\": sort descending according frequencies y computed summarise_function (highest value first) \"freq-asc\": sort ascending according frequencies y computed summarise_function (lowest value first) x.complete, category.complete, facet.complete value complete data. makes use tidyr::full_seq() tidyr::complete(). example, using x.complete = 0 apply data |> complete(full_seq(x, ...), fill = list(x = 0)). Using value TRUE (e.g., x.complete = TRUE) identical using value 0. datalabels values show datalabels, see also datalabels.format. can : Left blank. default values y column-type plots, plotting spatial 'sf' data, values first column. print maximum 25 labels unless datalabels = TRUE. TRUE FALSE force remove datalabels function calculate .data, datalabels = paste(round(column1), \"\\n\", column2) datalabels.round number digits round datalabels, applies \"%n\" \"%p\" replacement (see datalabels.format) datalabels.format format use datalabels. can function (euros()) text. text, \"%n\" replaced count number, \"%p\" replaced percentage total count. Use datalabels.format = NULL transform datalabels. datalabels.colour, datalabels.colour_fill, datalabels.size, datalabels.angle, datalabels.lineheight settings datalabels decimal.mark decimal mark, defaults dec_mark() big.mark thousands separator, defaults big_mark() summarise_function function use data summarised, see Examples. can also NULL, converted function(x) x. stacked logical indicate values must stacked stackedpercent logical indicate values must 100% stacked horizontal logical turn plot 90 degrees using coord_flip(). option also updates theme options, e.g., x.lbl_italic still apply original x axis. reverse logical reverse values category. Use legend.reverse reverse legend category. smooth logical add smooth. histograms, add density count overlaying line (default: TRUE). cases, smooth added using geom_smooth() (default: FALSE). smooth.method, smooth.formula, smooth.se, smooth.level, smooth.alpha, smooth.linewidth, smooth.linetype, smooth.colour settings smooth size size geom. Defaults 2 geoms point jitter, 5 dumbbell plots (using type = \"dumbbell\"), 0.75 otherwise. linetype linetype geom, suitable geoms draw lines. Defaults 1. linewidth linewidth geom, suitable geoms draw lines. Defaults : 0.5 geoms area (line), geoms boxplot/violin 0.1 sf 0.25 geoms continous fills (area) 1.0 dumbbell plots (using type = \"dumbbell\") 0.5 otherwise (histogram area) binwidth width bins (useful geom = \"histogram\"), can specified numeric value function calculates width x, see geom_histogram(). defaults approx. diff(range(x)) divided 12 22 based data. width width geom. Defaults 0.75 geoms boxplot, violin jitter, 0.5 otherwise. jitter_seed seed (randomisation factor) set using type = \"jitter\" violin_scale scale set using type = \"violin\", can also set \"area\" legend.position position legend, must \"top\", \"right\", \"bottom\", \"left\" \"none\" (NA NULL), can abbreviated. Defaults \"right\" numeric category values 'sf' plots, \"top\" otherwise. legend.reverse, legend.barheight, legend.barwidth, legend.nbin, legend.italic settings legend sankey.node_width width vertical nodes Sankey plot (.e., type = \"sankey\") sankey.node_whitespace whitespace nodes sankey.alpha alpha flows Sankey plot (.e., type = \"sankey\") sankey.remove_axes logical indicate whether axes must removed Sankey plot (.e., type = \"sankey\") zoom logical indicate plot scaled data, .e., x y axes start 0. set x.zoom = TRUE y.zoom = TRUE. sep separator character use multiple columns given either three directions: x, category facet, e.g. facet = c(column1, column2) print logical indicate result printed instead just returned text_factor text factor use, apply texts shown plot font font (family) use, can set options(plot2.font = \"...\"). Can installed system font > 1400 font names Google Fonts. using custom fonts R Markdown, sure set chunk option fig.showtext = TRUE, otherwise informative error generated. theme valid ggplot2 theme apply, NULL use default theme_grey(). argument accepts themes (e.g., theme_bw()), functions (e.g., theme_bw) characters themes (e.g., \"theme_bw\"). default theme_minimal2(), can set options(plot2.theme = \"...\"). background background colour entire plot, can also NA remove . evaluated get_colour(). applies theme NULL. markdown logical turn labels titles plotmath expressions, converting common markdown language using md_to_expression() function (defaults TRUE) ... argument give geom. override automatically-set settings geom. crs coordinate reference system (CRS) use. left blank, sf::st_transform() used transform geometric data new CRS. datalabels.centroid logical indicate whether datalabels must centred polygon (using sf::st_centroid(), default), placed 'best' spot surface (using sf::st_point_on_surface())","code":""},{"path":"https://msberends.github.io/plot2/reference/plot2-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Methods for plot2() — plot2-methods","text":"geographic information system (GIS) analysis, use sf package data set containing geometries. result can used input plot2().","code":""},{"path":"https://msberends.github.io/plot2/reference/plot2-package.html","id":null,"dir":"Reference","previous_headings":"","what":"plot2: A Plotting Assistant for Fast 'ggplot2' Visualisations — plot2-package","title":"plot2: A Plotting Assistant for Fast 'ggplot2' Visualisations — plot2-package","text":"streamlined extension 'ggplot2' designed simplify accelerate creation data visualisations. 'plot2' automates common tasks axis handling, plot type selection, data transformation, allowing users create complex, publication-ready plots minimal code. integrates seamlessly tidyverse retains full compatibility 'ggplot2', offering additional conveniences like enhanced sorting, faceting, custom theming.","code":""},{"path":[]},{"path":"https://msberends.github.io/plot2/reference/plot2-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"plot2: A Plotting Assistant for Fast 'ggplot2' Visualisations — plot2-package","text":"Maintainer: Matthijs S. Berends m.s.berends@umcg.nl","code":""},{"path":"https://msberends.github.io/plot2/reference/plot2.html","id":null,"dir":"Reference","previous_headings":"","what":"Conveniently Create a New ggplot — plot2","title":"Conveniently Create a New ggplot — plot2","text":"plot2() function convenient wrapper around many ggplot2 functions. design, ggplot2 package requires users use lot functions manual settings, plot2() function heavy lifting automatically requires users define arguments one single function, greatly increases convenience. Moreover, plot2() allows -place calculation y, axes, axis labels, often preventing need use group_by(), count(), mutate(), summarise(). See plot2-methods implemented methods different object classes.","code":""},{"path":"https://msberends.github.io/plot2/reference/plot2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conveniently Create a New ggplot — plot2","text":"","code":"plot2(   .data,   x = NULL,   y = NULL,   category = NULL,   facet = NULL,   type = NULL,   x.title = TRUE,   y.title = TRUE,   category.title = NULL,   title = NULL,   subtitle = NULL,   caption = NULL,   tag = NULL,   title.linelength = 60,   title.colour = getOption(\"plot2.colour_font_primary\", \"black\"),   subtitle.linelength = 60,   subtitle.colour = getOption(\"plot2.colour_font_secondary\", \"grey35\"),   na.replace = \"\",   na.rm = FALSE,   facet.position = \"top\",   facet.fill = NULL,   facet.bold = TRUE,   facet.italic = FALSE,   facet.size = 10,   facet.margin = 8,   facet.repeat_lbls_x = TRUE,   facet.repeat_lbls_y = NULL,   facet.fixed_y = NULL,   facet.fixed_x = NULL,   facet.drop = FALSE,   facet.nrow = NULL,   facet.relative = FALSE,   x.date_breaks = NULL,   x.date_labels = NULL,   x.date_remove_years = NULL,   category.focus = NULL,   colour = getOption(\"plot2.colour\", \"ggplot2\"),   colour_fill = NULL,   colour_opacity = 0,   x.lbl_angle = 0,   x.lbl_align = NULL,   x.lbl_italic = FALSE,   x.lbl_taxonomy = FALSE,   x.remove = FALSE,   x.position = \"bottom\",   x.max_items = Inf,   x.max_txt = \"(rest, x%n)\",   category.max_items = Inf,   category.max_txt = \"(rest, x%n)\",   facet.max_items = Inf,   facet.max_txt = \"(rest, x%n)\",   x.breaks = NULL,   x.n_breaks = NULL,   x.transform = \"identity\",   x.expand = NULL,   x.limits = NULL,   x.labels = NULL,   x.character = NULL,   x.drop = FALSE,   x.mic = FALSE,   x.zoom = FALSE,   y.remove = FALSE,   y.24h = FALSE,   y.age = FALSE,   y.scientific = NULL,   y.percent = FALSE,   y.percent_break = 0.1,   y.breaks = NULL,   y.n_breaks = NULL,   y.limits = NULL,   y.labels = NULL,   y.expand = NULL,   y.transform = \"identity\",   y.position = \"left\",   y.zoom = FALSE,   y_secondary = NULL,   y_secondary.type = type,   y_secondary.title = TRUE,   y_secondary.colour = colour,   y_secondary.colour_fill = colour_fill,   y_secondary.scientific = NULL,   y_secondary.percent = FALSE,   y_secondary.labels = NULL,   category.labels = NULL,   category.percent = FALSE,   category.breaks = NULL,   category.limits = NULL,   category.expand = 0,   category.midpoint = NULL,   category.transform = \"identity\",   category.date_breaks = NULL,   category.date_labels = NULL,   category.character = NULL,   x.sort = NULL,   category.sort = TRUE,   facet.sort = TRUE,   x.complete = NULL,   category.complete = NULL,   facet.complete = NULL,   datalabels = TRUE,   datalabels.round = ifelse(y.percent, 2, 1),   datalabels.format = \"%n\",   datalabels.colour = \"grey25\",   datalabels.colour_fill = NULL,   datalabels.size = (3 * text_factor),   datalabels.angle = 0,   datalabels.lineheight = 1,   decimal.mark = dec_mark(),   big.mark = big_mark(),   summarise_function = base::sum,   stacked = FALSE,   stackedpercent = FALSE,   horizontal = FALSE,   reverse = horizontal,   smooth = NULL,   smooth.method = NULL,   smooth.formula = NULL,   smooth.se = TRUE,   smooth.level = 0.95,   smooth.alpha = 0.25,   smooth.linewidth = 0.75,   smooth.linetype = 3,   smooth.colour = NULL,   size = NULL,   linetype = 1,   linewidth = NULL,   binwidth = NULL,   width = NULL,   jitter_seed = NA,   violin_scale = \"count\",   legend.position = NULL,   legend.title = NULL,   legend.reverse = FALSE,   legend.barheight = 6,   legend.barwidth = 1.5,   legend.nbin = 300,   legend.italic = FALSE,   sankey.node_width = 0.15,   sankey.node_whitespace = 0.03,   sankey.alpha = 0.5,   sankey.remove_axes = NULL,   zoom = FALSE,   sep = \" / \",   print = FALSE,   text_factor = 1,   font = getOption(\"plot2.font\"),   theme = getOption(\"plot2.theme\", \"theme_minimal2\"),   background = getOption(\"plot2.colour_background\", \"white\"),   markdown = TRUE,   data = NULL,   ... )"},{"path":"https://msberends.github.io/plot2/reference/plot2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conveniently Create a New ggplot — plot2","text":".data data plot x plotting 'direction' x axis. can : single variable .data, x = column1 function calculate one variables .data, x = format(column1, \"%Y\"), x = ifelse(column1 == \"\", \"Group \", \"\") Multiple variables .data, x = c(column1, column2, column2), using selection helpers x = (.character) x = starts_with(\"var_\") (allowed required Sankey plots using type = \"sankey\") y values use plotting along y axis. can : single variable .data, y = column1 Multiple variables .data, y = c(column1, column2) y = c(name1 = column1, \"name 2\" = column2), using selection helpers y = (.double) y = starts_with(\"var_\") (multiple variables allowed category set) function calculate .data returning single value, y = n() row count, based variables y = n_distinct(person_id), y = max(column1), y = median(column2) / column3 function calculate .data returning multiple values, y = quantile(column1, c(0.25, 0.75)) y = range(age)  (multiple values allowed category set) category, facet plotting 'direction' (category called 'fill' 'colour' ggplot2). can : single variable .data, category = column1 function calculate one variables .data, category = median(column2) / column3, facet = ifelse(column1 == \"\", \"Group \", \"\") Multiple variables .data, facet = c(column1, column2) (use sep control separator character) One variables .data using selection helpers, category = (.double) facet = starts_with(\"var_\") category can also date date/time (class Date POSIXt). type, y_secondary.type type visualisation use. can : ggplot2 geom name abbreviation \"col\" \"point\". geoms supported (including geom_blank()). Full function names can used (e.g., \"geom_histogram\"), can also abbreviated (e.g., \"h\", \"hist\"). following geoms can abbreviated first character: area (\"\"), boxplot (\"b\"), column (\"c\"), histogram (\"h\"), jitter (\"j\"), line (\"l\"), point (\"p\"), ribbon (\"r\"), violin (\"v\"). Please note: ggplot2, 'bars' 'columns' equal, common many people 'bars' oriented horizontally 'columns' oriented vertically since Microsoft Excel using terms way many years. reason, type = \"bar\" set type = \"col\" horizontal = TRUE. One additional types: \"barpercent\" (short: \"bp\"), effectively shortcut set type = \"col\" horizontal = TRUE x.max_items = 10 x.sort = \"freq-desc\" datalabels.format = \"%n (%p)\". \"linedot\" (short: \"ld\"), sets type = \"line\" adds two point geoms using add_point(); one large white dots one smaller dots using colours set colour. essentially equal base R plot(..., type = \"b\") closed shapes. \"dumbbell\" (short: \"d\"), sets type = \"point\" horizontal = TRUE, adds line points (using geom_segment()). line colour changed. plot type possible category two distinct values. \"sankey\" (short: \"s\") creates Sankey plots using category flows requires x contain multiple variables .data. default, also sets x.expand = c(0.05, 0.05) y.limits = c(NA, NA) y.expand = c(0.01, 0.01). -called 'nodes' ('blocks' text) considered datalabels, can set text size colour nodes using datalabels.size, datalabels.colour, datalabels.colour_fill. transparency flows can set using sankey.alpha, width nodes can set using sankey.node_width. Sankey plots can also flipped using horizontal = TRUE. Left blank. case, type determined automatically: \"boxplot\" x axis length unique values per x axis item least 3, \"point\" y x axes numeric, option \"plot2.default_type\" otherwise (defaults \"col\"). Use type = \"blank\" type = \"geom_blank\" add geom. title, subtitle, caption, tag, x.title, y.title, category.title, legend.title, y_secondary.title title use. can : character, supports markdown using md_to_expression() internally markdown = TRUE (default) function calculate .data, title = paste(\"Based n =\", n_distinct(person_id), \"individuals\") subtitle = paste(\"Total rows:\", n()), see Examples expression, e.g. using parse(text = \"...\") category.title defaults TRUE legend items numeric. title.linelength maximum number characters per line title, linebreak occurs title.colour text colour title subtitle.linelength maximum number characters per line subtitle, linebreak occurs subtitle.colour text colour subtitle na.replace character put place NA values na.rm = FALSE na.rm remove NA values showing plot facet.position, facet.fill, facet.bold, facet.italic, facet.size, facet.margin, facet.repeat_lbls_x, facet.repeat_lbls_y, facet.drop, facet.nrow, facet.relative additional settings plotting direction facet facet.fixed_y logical indicate whether y scales limits. Defaults TRUE coefficient variation (standard deviation divided mean) maximum values y less 25%. facet.fixed_x logical indicate whether x scales breaks. acts like inverse x.drop. x.date_breaks breaks use x axis contains dates, determined automatically left blank. accepts values \"1 day\" \"2 years\". x.date_labels labels use x axis contains dates, determined automatically left blank. accepts 'Excel' date-language \"d mmmm yyyy\". x.date_remove_years logical indicate whether years x values must unified. set years x values 1970 data contain leap year, 1972 otherwise. allows plot years category maintaining date range x. default FALSE, unless category contains years present x. category.focus value category highlighted, meaning values category greyed . can also numeric value 1 length unique values category, e.g. category.focus = 2 focus second legend item. colour get_colour(s) set, evaluated get_colour() set. can also one viridis colours automatic implementation plot: \"viridis\", \"magma\", \"inferno\", \"plasma\", \"cividis\", \"rocket\", \"mako\" \"turbo\". Also, can also named vector match values category, see Examples. Using named vector can also used manually sort values category. colour_fill get_colour(s) used filling, determined automatically left blank evaluated get_colour() colour_opacity amount opacity colour/colour_fill (0 = solid, 1 = transparent) x.lbl_angle angle use x axis counter-clockwise direction (.e., value 90 orient axis labels bottom top, value 270 orient axis labels top bottom) x.lbl_align alignment x axis 0 (left aligned) 1 (right aligned) x.lbl_italic logical indicate whether x labels italics x.lbl_taxonomy logical transform words x labels italics microorganisms data set AMR package. uses md_to_expression() internally set x.labels parse expressions. x.remove, y.remove logical indicate whether axis labels title removed x.position, y.position position axis x.max_items, category.max_items, facet.max_items number maximum items use, defaults infinite. values grouped summarised using summarise_function function. Please note: sorting applied first, allowing e.g. plot top n frequent values x axis combining x.sort = \"freq-desc\" x.max_items = n. x.max_txt, category.max_txt, facet.max_txt text use values included number *.max_items. placeholder %n replaced outcome summarise_function function, placeholder %p replaced percentage. x.breaks, y.breaks breaks function numeric vector use axis x.n_breaks, y.n_breaks number breaks, useful x.breaks cq. y.breaks NULL x.transform, y.transform, category.transform transformation function use, e.g. \"log2\". can : \"asinh\", \"asn\", \"atanh\", \"boxcox\", \"compose\", \"date\", \"exp\", \"hms\", \"identity\", \"log\", \"log10\", \"log1p\", \"log2\", \"logit\", \"modulus\", \"probability\", \"probit\", \"pseudo_log\", \"reciprocal\", \"reverse\", \"sqrt\", \"time\", \"timespan\", \"yj\". x.expand, y.expand expansion use axis, can length 1 2. x.expand defaults 0.5 y.expand defaults 0.25, except sf objects (default 0). x.limits, y.limits limits use axis, can length 1 2. Use NA highest lowest value data, e.g. y.limits = c(0, NA) y scale start zero. x.labels, y.labels, y_secondary.labels labels function character vector use axis x.character logical indicate whether values x axis forced character. default FALSE, except years (values 2000 2050) months (values 1 12). x.drop logical indicate whether factor levels dropped x.mic logical indicate whether x axis formatted MIC values, dropping factor levels adding missing factors 2 x.zoom, y.zoom logical indicate axis zoomed data, setting x.limits = c(NA, NA) x.expand = 0 x axis, y.limits = c(NA, NA) y.expand = 0 y axis y.24h logical indicate whether y labels breaks formatted 24-hour sequences y.age logical indicate whether y labels breaks formatted ages years y.scientific, y_secondary.scientific logical indicate whether y labels formatted scientific notation. Defaults TRUE range y values spans 10e5. y.percent, y_secondary.percent logical indicate whether y labels formatted percentages y.percent_break value y axis breaks y_secondary values use plotting along secondary y axis. functionality poorly supported ggplot2 might give unexpected results. Setting secondary y axis set colour axis titles. y_secondary.colour, y_secondary.colour_fill colours set secondary y axis, evaluated get_colour() category.labels, category.percent, category.breaks, category.expand, category.midpoint settings plotting direction category. category.limits limits use numeric category, can length 1 2. Use NA highest lowest value data, e.g. category.limits = c(0, NA) scale start zero. category.date_breaks breaks use category contains dates, determined automatically left blank. passed seq.Date(= ...) thus can : number, taken days, character string containing one \"day\", \"week\", \"month\", \"quarter\" \"year\" (optionally preceded integer space, /followed \"s\"). category.date_labels labels use category contains dates, determined automatically left blank. accepts 'Excel' date-language \"d mmmm yyyy\". category.character logical indicate whether values category forced character. default FALSE, except years (values 2000 2050) months (values 1 12). x.sort, category.sort, facet.sort sorting plotting direction, defaults TRUE, except continuous values x axis (dates numbers). Applying one sorting methods transform values ordered factor, ggplot2 uses orient data. Valid values : manual vector values TRUE: sort factors levels, otherwise sort ascending alphabet, maintaining numbers text (numeric sort) FALSE: sort according order data NULL: sort/transform \"asc\" \"alpha\": sort TRUE \"desc\": sort factors reversed levels, otherwise sort descending alphabet, maintaining numbers text (numeric sort) \"order\" \"inorder\": sort FALSE \"freq\" \"freq-desc\": sort descending according frequencies y computed summarise_function (highest value first) \"freq-asc\": sort ascending according frequencies y computed summarise_function (lowest value first) x.complete, category.complete, facet.complete value complete data. makes use tidyr::full_seq() tidyr::complete(). example, using x.complete = 0 apply data |> complete(full_seq(x, ...), fill = list(x = 0)). Using value TRUE (e.g., x.complete = TRUE) identical using value 0. datalabels values show datalabels, see also datalabels.format. can : Left blank. default values y column-type plots, plotting spatial 'sf' data, values first column. print maximum 25 labels unless datalabels = TRUE. TRUE FALSE force remove datalabels function calculate .data, datalabels = paste(round(column1), \"\\n\", column2) datalabels.round number digits round datalabels, applies \"%n\" \"%p\" replacement (see datalabels.format) datalabels.format format use datalabels. can function (euros()) text. text, \"%n\" replaced count number, \"%p\" replaced percentage total count. Use datalabels.format = NULL transform datalabels. datalabels.colour, datalabels.colour_fill, datalabels.size, datalabels.angle, datalabels.lineheight settings datalabels decimal.mark decimal mark, defaults dec_mark() big.mark thousands separator, defaults big_mark() summarise_function function use data summarised, see Examples. can also NULL, converted function(x) x. stacked logical indicate values must stacked stackedpercent logical indicate values must 100% stacked horizontal logical turn plot 90 degrees using coord_flip(). option also updates theme options, e.g., x.lbl_italic still apply original x axis. reverse logical reverse values category. Use legend.reverse reverse legend category. smooth logical add smooth. histograms, add density count overlaying line (default: TRUE). cases, smooth added using geom_smooth() (default: FALSE). smooth.method, smooth.formula, smooth.se, smooth.level, smooth.alpha, smooth.linewidth, smooth.linetype, smooth.colour settings smooth size size geom. Defaults 2 geoms point jitter, 5 dumbbell plots (using type = \"dumbbell\"), 0.75 otherwise. linetype linetype geom, suitable geoms draw lines. Defaults 1. linewidth linewidth geom, suitable geoms draw lines. Defaults : 0.5 geoms area (line), geoms boxplot/violin 0.1 sf 0.25 geoms continous fills (area) 1.0 dumbbell plots (using type = \"dumbbell\") 0.5 otherwise (histogram area) binwidth width bins (useful geom = \"histogram\"), can specified numeric value function calculates width x, see geom_histogram(). defaults approx. diff(range(x)) divided 12 22 based data. width width geom. Defaults 0.75 geoms boxplot, violin jitter, 0.5 otherwise. jitter_seed seed (randomisation factor) set using type = \"jitter\" violin_scale scale set using type = \"violin\", can also set \"area\" legend.position position legend, must \"top\", \"right\", \"bottom\", \"left\" \"none\" (NA NULL), can abbreviated. Defaults \"right\" numeric category values 'sf' plots, \"top\" otherwise. legend.reverse, legend.barheight, legend.barwidth, legend.nbin, legend.italic settings legend sankey.node_width width vertical nodes Sankey plot (.e., type = \"sankey\") sankey.node_whitespace whitespace nodes sankey.alpha alpha flows Sankey plot (.e., type = \"sankey\") sankey.remove_axes logical indicate whether axes must removed Sankey plot (.e., type = \"sankey\") zoom logical indicate plot scaled data, .e., x y axes start 0. set x.zoom = TRUE y.zoom = TRUE. sep separator character use multiple columns given either three directions: x, category facet, e.g. facet = c(column1, column2) print logical indicate result printed instead just returned text_factor text factor use, apply texts shown plot font font (family) use, can set options(plot2.font = \"...\"). Can installed system font > 1400 font names Google Fonts. using custom fonts R Markdown, sure set chunk option fig.showtext = TRUE, otherwise informative error generated. theme valid ggplot2 theme apply, NULL use default theme_grey(). argument accepts themes (e.g., theme_bw()), functions (e.g., theme_bw) characters themes (e.g., \"theme_bw\"). default theme_minimal2(), can set options(plot2.theme = \"...\"). background background colour entire plot, can also NA remove . evaluated get_colour(). applies theme NULL. markdown logical turn labels titles plotmath expressions, converting common markdown language using md_to_expression() function (defaults TRUE) data substitute .data, used formula notation, e.g., plot2(hp ~ mpg, data = mtcars) ... argument give geom. override automatically-set settings geom.","code":""},{"path":"https://msberends.github.io/plot2/reference/plot2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conveniently Create a New ggplot — plot2","text":"ggplot object","code":""},{"path":"https://msberends.github.io/plot2/reference/plot2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conveniently Create a New ggplot — plot2","text":"plot2() function convenient wrapper around many ggplot2 functions ggplot(), aes(), geom_col(), facet_wrap(), labs(), etc., provides: Writing lines codes possible Easy plotting three 'directions': x (regular x axis), category (replaces 'fill' 'colour') facet Automatic setting 'directions' based input data Setting -place calculations plotting directions even y Easy way sorting data many ways (alphabet, numeric value, frequency, original data order), setting single argument 'direction': x.sort, category.sort facet.sort Easy limiting values, e.g. setting x.max_items = 5 category.max_items = 5 Markdown support title text, theme Integrated support Google Font installed system font extra clean, minimalistic theme lot whitespace (without unnecessary margins) ideal printing: theme_minimal2() conveniences Microsoft Excel: y axis starts 0 possible y scale expands top better able interpret data points Date breaks can written human-readable format (\"d mmm yyyy\") Labels data values can easily printed automatically determined Support ggplot2 extension based ggplot2::fortify() ggplot2 package conjunction tidyr, forcats cleaner packages can provide functionalities, goal plot2() function generalise one function. generic plot2() function currently 150 arguments, default value. Less typing, faster coding.","code":""},{"path":"https://msberends.github.io/plot2/reference/plot2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conveniently Create a New ggplot — plot2","text":"","code":"options(plot2.colour = NULL, plot2.colour_sf_fill = NULL)  head(iris) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa  # no variables determined, so plot2() will try for itself - # the type will be points since the first two variables are numeric iris |>   plot2() #> i Using x = Sepal.Length #> i Using y = Sepal.Width #> i Using category = Species #> i Using type = \"point\" since both axes are numeric   # if x and y are set, no additional mapping will be set: iris |>    plot2(Sepal.Width, Sepal.Length) #> i Using type = \"point\" since both axes are numeric  iris |>    plot2(Species, Sepal.Length) #> i Using type = \"boxplot\" since all groups in Species contain at least three values   # the arguments are in this order: x, y, category, facet iris |>    plot2(Sepal.Length, Sepal.Width, Petal.Length, Species) #> i Using type = \"point\" since both axes are numeric #> i Assuming facet.fixed_x = TRUE since the three x scales differ by less than 25% #> i Assuming facet.fixed_y = TRUE since the three y scales differ by less than 25% #> i Assuming facet.repeat_lbls_y = FALSE since y has fixed scales   iris |>    plot2(Sepal.Length, Sepal.Width, Petal.Length, Species,         colour = \"viridis\") # set the viridis colours #> i Using type = \"point\" since both axes are numeric #> i Assuming facet.fixed_x = TRUE since the three x scales differ by less than 25% #> i Assuming facet.fixed_y = TRUE since the three y scales differ by less than 25% #> i Assuming facet.repeat_lbls_y = FALSE since y has fixed scales         iris |>    plot2(Sepal.Length, Sepal.Width, Petal.Length, Species,         colour = c(\"white\", \"red\", \"black\")) # set own colours #> i Using type = \"point\" since both axes are numeric #> i Using category.midpoint = 3.45 (the current category scale centre) #> i Assuming facet.fixed_x = TRUE since the three x scales differ by less than 25% #> i Assuming facet.fixed_y = TRUE since the three y scales differ by less than 25% #> i Assuming facet.repeat_lbls_y = FALSE since y has fixed scales   # y can also be multiple (named) columns iris |>    plot2(x = Sepal.Length,         y = c(Length = Petal.Length, Width = Petal.Width),         category.title = \"Petal property\") #> i Using type = \"point\" since both axes are numeric  iris |>   # with included selection helpers such as where(), starts_with(), etc.:   plot2(x = Species, y = where(is.double)) #> i Using y = c(Petal.Length, Petal.Width, Sepal.Length, Sepal.Width) #> i Using type = \"boxplot\" since all groups in Species and category contain at least three values     # support for secondary y axis mtcars |>   plot2(x = mpg,         y = hp,         y_secondary = disp ^ 2,          y_secondary.scientific = TRUE,         title = \"Secondary y axis sets colour to the axis titles\") #> i Using type = \"point\" since both axes are numeric    admitted_patients #> # A tibble: 250 × 7 #>    date       patient_id gender   age age_group hospital ward    #>    <date>          <dbl> <chr>  <dbl> <ord>     <fct>    <chr>   #>  1 2002-01-14          1 M         78 75+       D        Non-ICU #>  2 2002-03-17          2 M         78 75+       C        Non-ICU #>  3 2002-04-08          3 M         78 75+       A        ICU     #>  4 2002-04-14          4 M         72 55-74     C        Non-ICU #>  5 2002-05-07          5 M         83 75+       C        Non-ICU #>  6 2002-05-16          6 F         65 55-74     B        ICU     #>  7 2002-05-16          7 M         47 25-54     D        Non-ICU #>  8 2002-06-18          8 M         30 25-54     B        ICU     #>  9 2002-06-23          9 M         82 75+       D        Non-ICU #> 10 2002-06-23          9 M         82 75+       D        Non-ICU #> # ℹ 240 more rows  # the arguments are in this order: x, y, category, facet admitted_patients |>   plot2(hospital, age) #> i Using type = \"boxplot\" since all groups in hospital contain at least three values   admitted_patients |>   plot2(hospital, age, gender) #> i Using type = \"boxplot\" since all groups in hospital and gender contain at least three values     admitted_patients |>   plot2(hospital, age, gender, ward) #> i Using type = \"boxplot\" since all groups in hospital and gender and ward contain at least three values #> i Assuming facet.fixed_y = TRUE since the two y scales differ by less than 25% #> i Assuming facet.repeat_lbls_y = FALSE since y has fixed scales     # or use any function for y admitted_patients |>   plot2(hospital, median(age), gender, ward) #> i To compare single values in two categories (gender), a dumbbell plot can be used (type = \"dumbbell\" or type = \"d\") #> i Assuming facet.fixed_y = TRUE since the two y scales differ by less than 25% #> i Assuming facet.repeat_lbls_y = FALSE since y has fixed scales  admitted_patients |>   plot2(hospital, n(), gender, ward) #> i To compare single values in two categories (gender), a dumbbell plot can be used (type = \"dumbbell\" or type = \"d\")   admitted_patients |>   plot2(x = hospital,         y = age,         category = gender,         colour = c(\"F\" = \"#3F681C\", \"M\" = \"#375E97\"),         colour_fill = \"#FFBB00AA\",         linewidth = 1.25,         y.age = TRUE) #> i Using type = \"boxplot\" since all groups in hospital and gender contain at least three values   admitted_patients |>   plot2(age, type = \"hist\") #> i Using binwidth = 6.4 based on data #> i Assuming smooth = TRUE for type = \"histogram\"   # even titles support calculations, including support for {glue} admitted_patients |>   plot2(age, type = \"hist\",         title = paste(\"Based on n =\", n_distinct(patient_id), \"patients\"),         subtitle = paste(\"Total rows:\", n()),         caption = glue::glue(\"From {n_distinct(hospital)} hospitals\"),         x.title = paste(\"Age ranging from\", paste(range(age), collapse = \" to \"))) #> i Using binwidth = 6.4 based on data #> i Assuming smooth = TRUE for type = \"histogram\"    # the default type is column, datalabels are automatically # set in non-continuous types: admitted_patients |>    plot2(hospital, n(), gender) #> i To compare single values in two categories (gender), a dumbbell plot can be used (type = \"dumbbell\" or type = \"d\")     admitted_patients |>    plot2(hospital, n(), gender,         stacked = TRUE) #> i To compare single values in two categories (gender), a dumbbell plot can be used (type = \"dumbbell\" or type = \"d\")           admitted_patients |>    plot2(hospital, n(), gender,         stackedpercent = TRUE) #> i To compare single values in two categories (gender), a dumbbell plot can be used (type = \"dumbbell\" or type = \"d\")   # two categories might benefit from a dumbbell plot: admitted_patients |>    plot2(hospital, median(age), gender, type = \"dumbbell\")    # sort on any direction: admitted_patients |>    plot2(hospital, n(), gender,         x.sort = \"freq-asc\",         stacked = TRUE) #> i Applying x.sort = \"freq-asc\" using summarise_function = sum #> i To compare single values in two categories (gender), a dumbbell plot can be used (type = \"dumbbell\" or type = \"d\")   admitted_patients |>    plot2(hospital, n(), gender,         x.sort = c(\"B\", \"D\", \"A\"), # missing values (\"C\") will be added         category.sort = \"alpha-desc\",         stacked = TRUE) #> i To compare single values in two categories (gender), a dumbbell plot can be used (type = \"dumbbell\" or type = \"d\")           # support for Sankey plots Titanic |> # a table from base R   plot2(x = c(Age, Class, Survived),         category = Sex,         type = \"sankey\") #> ! Input class 'table' was transformed using `as.data.frame()` #> i Using y = Freq since `as.data.table()` on a `table` results in a 'Freq' column #> i Assuming sankey.remove_axes = TRUE   # matrix support, such as for cor() correlation_matrix <- cor(mtcars) class(correlation_matrix) #> [1] \"matrix\" \"array\"  head(correlation_matrix) #>             mpg        cyl       disp         hp       drat         wt #> mpg   1.0000000 -0.8521620 -0.8475514 -0.7761684  0.6811719 -0.8676594 #> cyl  -0.8521620  1.0000000  0.9020329  0.8324475 -0.6999381  0.7824958 #> disp -0.8475514  0.9020329  1.0000000  0.7909486 -0.7102139  0.8879799 #> hp   -0.7761684  0.8324475  0.7909486  1.0000000 -0.4487591  0.6587479 #> drat  0.6811719 -0.6999381 -0.7102139 -0.4487591  1.0000000 -0.7124406 #> wt   -0.8676594  0.7824958  0.8879799  0.6587479 -0.7124406  1.0000000 #>             qsec         vs         am       gear       carb #> mpg   0.41868403  0.6640389  0.5998324  0.4802848 -0.5509251 #> cyl  -0.59124207 -0.8108118 -0.5226070 -0.4926866  0.5269883 #> disp -0.43369788 -0.7104159 -0.5912270 -0.5555692  0.3949769 #> hp   -0.70822339 -0.7230967 -0.2432043 -0.1257043  0.7498125 #> drat  0.09120476  0.4402785  0.7127111  0.6996101 -0.0907898 #> wt   -0.17471588 -0.5549157 -0.6924953 -0.5832870  0.4276059 correlation_matrix |>    plot2() #> i Assuming type = \"tile\" since the matrix contains identical row and column names #> ! Omitting printing of 121 datalabels - use datalabels = TRUE to force printing   correlation_matrix |>    plot2(colour = c(\"blue3\", \"white\", \"red3\"),         datalabels = TRUE,         category.title = \"*r*-value\",         title =  \"Correlation matrix\") #> i Assuming type = \"tile\" since the matrix contains identical row and column names #> i Using category.midpoint = 0 (the current category scale centre)    # plot2() supports all S3 extensions available through # ggplot2::fortify(), such as regression models: lm(mpg ~ hp, data = mtcars) |>    plot2(x = mpg ^ -3,         y = hp ^ 2,         smooth = TRUE,         smooth.method = \"lm\",         smooth.formula = \"y ~ log(x)\",         title = \"Titles/captions *support* **markdown**\",         subtitle = \"Axis titles contain the square notation: x^2\") #> i Using type = \"point\" since both axes are numeric   # sf objects (geographic plots, 'simple features') are also supported if (require(\"sf\")) {   netherlands |>      plot2(datalabels = paste0(province, \"\\n\", round(area_km2))) } #> Loading required package: sf #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE #> i Using category = area_km2 #> i Assuming datalabels.centroid = TRUE. Set to FALSE for a point-on-surface placing of datalabels.   # support for any system or Google font mtcars |>   plot2(mpg, hp, font = \"Rock Salt\",         title = \"This plot uses a Google Font\") #> i Using type = \"point\" since both axes are numeric"},{"path":"https://msberends.github.io/plot2/reference/plotly.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Interactive Plotly — as_plotly","title":"Create Interactive Plotly — as_plotly","text":"Transform ggplot2/plot2 object interactive plot using Plotly R Open Source Graphing Library.","code":""},{"path":"https://msberends.github.io/plot2/reference/plotly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Interactive Plotly — as_plotly","text":"","code":"as_plotly(plot, ...)  plotly_style(plot, ...)"},{"path":"https://msberends.github.io/plot2/reference/plotly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Interactive Plotly — as_plotly","text":"plot ggplot2 plot ... case as_plotly(): arguments pass layout() change Plotly layout object case plotly_style(): arguments pass style() change Plotly style object","code":""},{"path":"https://msberends.github.io/plot2/reference/plotly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Interactive Plotly — as_plotly","text":"","code":"mtcars |>   plot2(mpg, hp) |>    as_plotly() #> i Using type = \"point\" since both axes are numeric  {\"x\":{\"data\":[{\"x\":[10.4,10.4,13.300000000000001,14.300000000000001,14.699999999999999,15,15.199999999999999,15.199999999999999,15.5,15.800000000000001,16.399999999999999,17.300000000000001,17.800000000000001,18.100000000000001,18.699999999999999,19.199999999999999,19.199999999999999,19.699999999999999,21,21,21.399999999999999,21.399999999999999,21.5,22.800000000000001,22.800000000000001,24.399999999999999,26,27.300000000000001,30.399999999999999,30.399999999999999,32.399999999999999,33.899999999999999],\"y\":[205,215,245,245,230,335,180,150,150,264,180,180,123,105,175,123,175,175,110,110,110,109,97,93,95,62,91,66,52,113,66,65],\"text\":[\"hp: 205<br />mpg: 10.4\",\"hp: 215<br />mpg: 10.4\",\"hp: 245<br />mpg: 13.3\",\"hp: 245<br />mpg: 14.3\",\"hp: 230<br />mpg: 14.7\",\"hp: 335<br />mpg: 15.0\",\"hp: 180<br />mpg: 15.2\",\"hp: 150<br />mpg: 15.2\",\"hp: 150<br />mpg: 15.5\",\"hp: 264<br />mpg: 15.8\",\"hp: 180<br />mpg: 16.4\",\"hp: 180<br />mpg: 17.3\",\"hp: 123<br />mpg: 17.8\",\"hp: 105<br />mpg: 18.1\",\"hp: 175<br />mpg: 18.7\",\"hp: 123<br />mpg: 19.2\",\"hp: 175<br />mpg: 19.2\",\"hp: 175<br />mpg: 19.7\",\"hp: 110<br />mpg: 21.0\",\"hp: 110<br />mpg: 21.0\",\"hp: 110<br />mpg: 21.4\",\"hp: 109<br />mpg: 21.4\",\"hp:  97<br />mpg: 21.5\",\"hp:  93<br />mpg: 22.8\",\"hp:  95<br />mpg: 22.8\",\"hp:  62<br />mpg: 24.4\",\"hp:  91<br />mpg: 26.0\",\"hp:  66<br />mpg: 27.3\",\"hp:  52<br />mpg: 30.4\",\"hp: 113<br />mpg: 30.4\",\"hp:  66<br />mpg: 32.4\",\"hp:  65<br />mpg: 33.9\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,0,0,1)\",\"opacity\":1,\"size\":7.559055118110237,\"symbol\":\"circle\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(0,0,0,1)\"}},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":22.6417600664176,\"r\":15.940224159402243,\"b\":35.599833955998349,\"l\":41.444582814445837},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-0.84750000000000003,40.68],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"10\",\"20\",\"30\",\"40\"],\"tickvals\":[0,9.9999999999999982,20.000000000000004,29.999999999999996,40],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"10\",\"20\",\"30\",\"40\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(191,191,191,1)\",\"ticklen\":2.6567040265670401,\"tickwidth\":0.9962640099626402,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(191,191,191,1)\",\"linewidth\":0.4981320049813201,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"mpg\",\"font\":{\"color\":\"rgba(64,64,64,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0,418.75],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"100\",\"200\",\"300\",\"400\"],\"tickvals\":[0,100,200,300,400],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"100\",\"200\",\"300\",\"400\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":2.6567040265670401,\"tickwidth\":0,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(191,191,191,1)\",\"gridwidth\":0.4981320049813201,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"hp\",\"font\":{\"color\":\"rgba(64,64,64,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":null,\"bordercolor\":null,\"borderwidth\":0,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.955168119551683},\"title\":{\"text\":\"\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":13.283520132835198}}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"1c521c895615\":{\"y\":{},\"x\":{},\"type\":\"scatter\"}},\"cur_data\":\"1c521c895615\",\"visdat\":{\"1c521c895615\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}   mtcars |>   plot2(mpg, hp) |>    as_plotly(dragmode = \"pan\") |>   plotly_style(marker.line.color = \"red\",                hoverinfo = \"y\") #> i Using type = \"point\" since both axes are numeric  {\"x\":{\"data\":[{\"x\":[10.4,10.4,13.300000000000001,14.300000000000001,14.699999999999999,15,15.199999999999999,15.199999999999999,15.5,15.800000000000001,16.399999999999999,17.300000000000001,17.800000000000001,18.100000000000001,18.699999999999999,19.199999999999999,19.199999999999999,19.699999999999999,21,21,21.399999999999999,21.399999999999999,21.5,22.800000000000001,22.800000000000001,24.399999999999999,26,27.300000000000001,30.399999999999999,30.399999999999999,32.399999999999999,33.899999999999999],\"y\":[205,215,245,245,230,335,180,150,150,264,180,180,123,105,175,123,175,175,110,110,110,109,97,93,95,62,91,66,52,113,66,65],\"text\":[\"hp: 205<br />mpg: 10.4\",\"hp: 215<br />mpg: 10.4\",\"hp: 245<br />mpg: 13.3\",\"hp: 245<br />mpg: 14.3\",\"hp: 230<br />mpg: 14.7\",\"hp: 335<br />mpg: 15.0\",\"hp: 180<br />mpg: 15.2\",\"hp: 150<br />mpg: 15.2\",\"hp: 150<br />mpg: 15.5\",\"hp: 264<br />mpg: 15.8\",\"hp: 180<br />mpg: 16.4\",\"hp: 180<br />mpg: 17.3\",\"hp: 123<br />mpg: 17.8\",\"hp: 105<br />mpg: 18.1\",\"hp: 175<br />mpg: 18.7\",\"hp: 123<br />mpg: 19.2\",\"hp: 175<br />mpg: 19.2\",\"hp: 175<br />mpg: 19.7\",\"hp: 110<br />mpg: 21.0\",\"hp: 110<br />mpg: 21.0\",\"hp: 110<br />mpg: 21.4\",\"hp: 109<br />mpg: 21.4\",\"hp:  97<br />mpg: 21.5\",\"hp:  93<br />mpg: 22.8\",\"hp:  95<br />mpg: 22.8\",\"hp:  62<br />mpg: 24.4\",\"hp:  91<br />mpg: 26.0\",\"hp:  66<br />mpg: 27.3\",\"hp:  52<br />mpg: 30.4\",\"hp: 113<br />mpg: 30.4\",\"hp:  66<br />mpg: 32.4\",\"hp:  65<br />mpg: 33.9\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,0,0,1)\",\"opacity\":1,\"size\":7.559055118110237,\"symbol\":\"circle\",\"line\":{\"width\":1.8897637795275593,\"color\":\"red\"}},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"y\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":22.6417600664176,\"r\":15.940224159402243,\"b\":35.599833955998349,\"l\":41.444582814445837},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-0.84750000000000003,40.68],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"10\",\"20\",\"30\",\"40\"],\"tickvals\":[0,9.9999999999999982,20.000000000000004,29.999999999999996,40],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"10\",\"20\",\"30\",\"40\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(191,191,191,1)\",\"ticklen\":2.6567040265670401,\"tickwidth\":0.9962640099626402,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(191,191,191,1)\",\"linewidth\":0.4981320049813201,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"mpg\",\"font\":{\"color\":\"rgba(64,64,64,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0,418.75],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"100\",\"200\",\"300\",\"400\"],\"tickvals\":[0,100,200,300,400],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"100\",\"200\",\"300\",\"400\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":2.6567040265670401,\"tickwidth\":0,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(191,191,191,1)\",\"gridwidth\":0.4981320049813201,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"hp\",\"font\":{\"color\":\"rgba(64,64,64,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":null,\"bordercolor\":null,\"borderwidth\":0,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.955168119551683},\"title\":{\"text\":\"\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":13.283520132835198}}},\"hovermode\":\"closest\",\"barmode\":\"relative\",\"dragmode\":\"pan\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"1c523581aa95\":{\"y\":{},\"x\":{},\"type\":\"scatter\"}},\"cur_data\":\"1c523581aa95\",\"visdat\":{\"1c523581aa95\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://msberends.github.io/plot2/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>%, all_of, any_of, first, last, n, n_distinct tidyselect ends_with, everything, matches, starts_with, ","code":""},{"path":"https://msberends.github.io/plot2/reference/theme_minimal2.html","id":null,"dir":"Reference","previous_headings":"","what":"An Even More Minimal Theme — theme_minimal2","title":"An Even More Minimal Theme — theme_minimal2","text":"ggplot2 theme provides even white area less clutter theme_minimal().","code":""},{"path":"https://msberends.github.io/plot2/reference/theme_minimal2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An Even More Minimal Theme — theme_minimal2","text":"","code":"theme_minimal2(   ...,   colour_font_primary = getOption(\"plot2.colour_font_primary\", \"black\"),   colour_font_secondary = getOption(\"plot2.colour_font_secondary\", \"grey35\"),   colour_font_axis = getOption(\"plot2.colour_font_axis\", \"grey25\"),   colour_background = getOption(\"plot2.colour_background\", \"white\") )"},{"path":"https://msberends.github.io/plot2/reference/theme_minimal2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An Even More Minimal Theme — theme_minimal2","text":"... arguments passed ggplot2::theme() colour_font_primary colour set plot title tag colour_font_secondary colour set plot subtitle caption colour_font_axis colour set axis titles x y colour_background colour set background","code":""},{"path":"https://msberends.github.io/plot2/reference/theme_minimal2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An Even More Minimal Theme — theme_minimal2","text":"","code":"library(ggplot2) ggplot(mtcars, aes(hp, mpg)) +   geom_point()     ggplot(mtcars, aes(hp, mpg)) +   geom_point() +   theme_minimal2()     # in plot2(), the 'theme' argument defaults to theme_minimal2(): mtcars |>   plot2(hp, mpg) #> i Using type = \"point\" since both axes are numeric     # set to NULL to use the ggplot2 default: mtcars |>   plot2(hp, mpg, theme = NULL) #> i Using type = \"point\" since both axes are numeric"}]
