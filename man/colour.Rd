% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_colour.R
\name{get_colour}
\alias{get_colour}
\alias{register_colour}
\alias{as.character.colour}
\alias{print.colour}
\alias{add_white}
\title{Colours from \R, Viridis and More}
\usage{
get_colour(x, length = 1, opacity = 0)

register_colour(...)

\method{as.character}{colour}(x, ...)

\method{print}{colour}(x, ...)

add_white(x, white)
}
\arguments{
\item{x}{colour or colour palette name. Input can be:
\itemize{
\item One of the colourblind-safe \code{viridisLite} palettes:
\itemize{
\item \code{"viridis"}
\item \code{"magma"}
\item \code{"inferno"}
\item \code{"plasma"}
\item \code{"cividis"}
\item \code{"rocket"}
\item \code{"mako"}
\item \code{"turbo"}
}
\item One of the built-in palettes in \R (these are from \R 4.4.1):
\itemize{
\item \code{"Accent"}
\item \code{"Alphabet"}
\item \code{"Classic Tableau"}
\item \code{"Dark 2"}
\item \code{"Okabe-Ito"}
\item \code{"Paired"}
\item \code{"Pastel 1"}
\item \code{"Pastel 2"}
\item \code{"Polychrome 36"}
\item \code{"R3"}
\item \code{"R4"}
\item \code{"Set 1"}
\item \code{"Set 2"}
\item \code{"Set 3"}
\item \code{"Tableau 10"}
\item \code{"ggplot2"}
\item \code{"grayscale"}
\item \code{"greyscale"}
\item \code{"heatmap"}
\item \code{"rainbow"}
\item \code{"terrain"}
\item \code{"topo"}
}
\item One of the 657 built-in \code{\link[=colours]{colours()}} in \R (even case-insensitive), such as \code{"blanchedalmond"}, \code{"darkolivegreen1"}, \code{"goldenrod1"}, \code{"powderblue"}, \code{"springgreen3"}
\item One of the pre-registered colours using \code{\link[=register_colour]{register_colour()}}
}}

\item{length}{size of the vector to be returned}

\item{opacity}{amount of opacity (0 = solid, 1 = transparent)}

\item{...}{named vectors with known, valid colours. They must be coercible with \code{\link[=get_colour]{get_colour()}}.}

\item{white}{number between \verb{[0, 1]} to add white to \code{x}}
}
\value{
\link{character} vector in HTML format (i.e., \code{"#AABBCC"}) with new class \code{colour}
}
\description{
Colours from \R, viridis and more. The output prints in the console with the actual colours.
}
\details{
A palette from \R will be expanded where needed, so even \code{get_colour("R4", length = 20)} will work, despite "R4" only supporting a maximum of eight colours.
}
\examples{
get_colour(c("red", "tan1", "#ffa", "FFAA00"))

par(mar = c(0.5, 2.5, 1.5, 0)) # set plot margins for below plots

# all colourblind-safe colour palettes from the famous viridisLite package
barplot(1:7,
        col = get_colour("viridis", 7))
barplot(1:7,
        col = get_colour("magma", 7))

barplot(8:1,
        col = get_colour("R4", 8),
        main = "Some palettes have only 8 colours...")
barplot(20:1,
        col = get_colour("R4", 20),
        main = "Not anymore!")


# Registering Colours --------------------------------------------------

# to register colours, use named input - the values will be evaluated
# with get_colour()
get_colour("red123")
register_colour(red123 = "red", red456 = "#ff0000", red789 = "f00")
get_colour("red123")
get_colour("red456")
get_colour("red789")

# you can also register a group name
register_colour(red_group = c("red123", "ff4400", "red3", "red4"))
get_colour("red_group")
get_colour("red_group", 3)

# Registering colours is ideal for your (organisational) style in plots.
# Let's say these are your style:
register_colour(navy_blue = "#1F3A93",
                burnt_orange = "#D35400",
                forest_green = "#2C6F47",
                goldenrod_yellow = "#DAA520",
                slate_grey = "#708090",
                plum_purple = "#8E4585")

# Then register the whole colour list too:
register_colour(my_organisation = c("navy_blue", "burnt_orange",
                                    "forest_green", "goldenrod_yellow",
                                    "slate_grey", "plum_purple"))
# Check that it works:
get_colour("my_organisation", length = 6)

# Now use it in plots as you like:
iris |>
  plot2(x = Species, y = where(is.double), colour = "my_organisation")

# Or even set the option to use it in any future plot:
options(plot2.colour = "my_organisation")

iris |>
  plot2(x = Species, y = where(is.double))

# reset option again
options(plot2.colour = NULL)


# Use add_white() to add white to existing colours:
colours <- get_colour("R4", 6)
colours
add_white(colours, 0.25)
add_white(colours, 0.5)
add_white(colours, 0.75)

add_white("red", 1/128)
add_white("red", 1/64)
add_white("red", 1/32)
}
